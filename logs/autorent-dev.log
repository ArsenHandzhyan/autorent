01:28:02.348 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4h48m59s901ms931µs600ns).
01:29:04.300 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
01:29:04.302 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
01:29:04.757 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
01:29:07.020 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
01:29:07.088 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 22224 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
01:29:07.088 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
01:29:07.088 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
01:29:08.476 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
01:29:08.623 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 134 ms. Found 15 JPA repository interfaces.
01:29:10.096 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
01:29:10.110 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
01:29:10.113 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:29:10.113 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
01:29:10.194 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:29:10.194 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3047 ms
01:29:10.466 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
01:29:10.652 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
01:29:10.728 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
01:29:10.774 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
01:29:10.998 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
01:29:11.037 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
01:29:12.679 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@e27d97b
01:29:12.686 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
01:29:13.890 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
01:29:17.490 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
01:29:17.949 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
01:29:18.845 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
01:29:18.845 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
01:29:19.218 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
01:29:19.360 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
01:29:19.393 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
01:29:19.970 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
01:29:20.076 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@e266ddd, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@373fe79a, org.springframework.security.web.context.SecurityContextHolderFilter@678f4876, org.springframework.security.web.header.HeaderWriterFilter@648d6010, org.springframework.web.filter.CorsFilter@90f8c34, org.springframework.security.web.csrf.CsrfFilter@150a615c, org.springframework.security.web.authentication.logout.LogoutFilter@7dd1fd41, ru.anapa.autorent.config.JwtRequestFilter@704d3b00, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3b7645f1, org.springframework.security.web.session.ConcurrentSessionFilter@2744e8f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7f61a589, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7d7337d0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@267aa736, org.springframework.security.web.session.SessionManagementFilter@70176150, org.springframework.security.web.access.ExceptionTranslationFilter@1a111a95, org.springframework.security.web.access.intercept.AuthorizationFilter@43ca23a8]
01:29:20.575 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
01:29:20.591 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
01:29:20.609 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 13.899 seconds (process running for 14.499)
01:29:20.806 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
01:29:20.894 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
01:29:20.895 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:29:20.998 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
01:29:20.999 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:29:21.096 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:29:21.116 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:29:21.195 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
01:29:21.210 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:29:21.286 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:29:21.302 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:29:21.391 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
01:29:21.546 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
01:29:21.730 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
01:29:22.073 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
01:29:22.109 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:29:22.201 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:29:22.291 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
01:29:22.292 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
01:29:22.292 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
01:29:22.464 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
01:29:22.985 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:29:23.714 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:29:24.229 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:29:25.903 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:29:26.291 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
01:29:26.292 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
01:29:26.292 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
01:29:26.292 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
01:29:26.293 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
01:29:26.293 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
01:29:26.293 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
01:29:26.293 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
01:29:26.298 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:29:26.394 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:29:26.496 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:29:26.597 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:29:26.693 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:29:26.786 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:29:26.892 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
01:29:26.992 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
01:29:27.088 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:29:27.360 [main] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
01:29:27.453 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
01:29:27.548 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
01:29:27.641 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
01:29:28.023 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
01:29:28.111 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
01:29:28.221 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
01:29:35.910 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
01:29:35.910 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
01:29:35.911 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
01:29:35.927 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/accounts
01:29:35.938 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
01:29:35.939 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 6935C688357D010FA80F070B0D8E7113
01:29:35.973 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/accounts?continue to session
01:29:35.974 [http-nio-8080-exec-1] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
01:29:35.979 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:29:35.980 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
01:29:35.982 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:29:35.999 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Login page requested
01:29:36.453 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:29:36.453 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:29:36.454 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
01:29:36.455 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
01:29:36.455 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:29:36.455 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:29:38.891 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
01:29:39.231 [http-nio-8080-exec-5] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
01:29:39.239 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:29:39.343 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:29:39.445 [http-nio-8080-exec-5] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
01:29:39.450 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
01:29:39.869 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
01:29:39.871 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.s.ChangeSessionIdAuthenticationStrategy - Changed session id from D8B9E2C86443F299EBB413A0E9615D10
01:29:39.872 [http-nio-8080-exec-5] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session 2CF4C2B59787F6000917674B42210526, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
01:29:39.877 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
01:29:39.878 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@14aed825]
01:29:39.879 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]
01:29:39.886 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:29:39.889 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:29:39.889 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:29:39.892 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:29:39.911 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:29:40.088 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:29:40.617 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:29:40.995 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:29:41.091 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:29:41.180 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:29:41.452 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:29:41.544 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:29:41.634 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:29:42.011 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:29:42.104 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:29:42.192 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:29:42.295 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:29:42.472 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:29:42.474 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:29:42.476 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:29:42.477 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:29:42.483 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:29:42.484 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:29:46.265 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:29:46.268 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:29:46.269 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:29:46.272 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:29:46.274 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:29:46.536 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:29:47.056 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:29:47.424 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:29:47.518 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:29:47.613 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:29:47.879 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:29:47.971 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:29:48.064 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:29:48.430 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:29:48.521 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:29:48.612 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:29:48.708 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:29:48.832 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:29:48.833 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:29:48.837 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:29:48.838 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:29:48.850 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:29:48.851 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:29:55.544 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:29:55.548 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:29:55.549 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:29:55.551 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:29:55.553 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:29:55.560 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:29:55.735 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:29:55.825 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:29:55.986 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:29:55.986 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:29:55.989 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:29:55.990 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:29:55.998 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:29:55.999 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:30:02.305 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/rental/53
01:30:02.308 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:30:02.309 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/rental/53
01:30:02.316 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:30:02.318 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:30:02.583 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:30:02.948 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:30:03.041 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:30:03.136 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:30:03.238 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:30:03.327 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:30:03.418 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:30:03.577 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:30:03.577 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:30:03.584 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:30:03.584 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:30:03.598 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:30:03.599 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:24.907 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/accounts
01:31:24.909 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:24.910 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/accounts
01:31:25.171 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0
01:31:25.263 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:25.354 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:25.444 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:25.538 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:25.626 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:25.715 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:25.804 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:25.895 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:25.984 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:26.074 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:26.164 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:26.253 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:26.343 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:26.736 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:31:26.736 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:31:26.737 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:31:26.738 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:31:26.740 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:26.743 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:33.435 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:31:33.438 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:33.438 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:31:33.439 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:31:33.440 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:31:33.700 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:31:34.218 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:31:34.682 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:31:34.772 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:31:34.862 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:31:35.128 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:31:35.218 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:31:35.307 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:35.661 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:31:35.751 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:31:35.838 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:35.931 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:31:36.041 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:31:36.041 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:31:36.045 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:31:36.046 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:31:36.051 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:36.052 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:38.529 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:31:38.533 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:38.534 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:31:38.534 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:31:38.535 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:31:38.536 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:31:38.711 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:31:38.800 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:31:38.922 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:31:38.922 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:31:38.924 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:31:38.924 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:31:38.927 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:38.928 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:31:41.683 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:31:41.685 [http-nio-8080-exec-1] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:31:41.693 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:31:41.694 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:31:41.695 [http-nio-8080-exec-10] INFO  r.a.a.controller.AuthController - Login page requested
01:31:41.695 [http-nio-8080-exec-10] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:31:41.701 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:35:09.903 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
01:35:09.905 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
01:35:10.354 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
01:35:12.676 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
01:35:12.738 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 13876 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
01:35:12.739 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
01:35:12.739 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
01:35:14.041 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
01:35:14.173 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 115 ms. Found 15 JPA repository interfaces.
01:35:15.342 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
01:35:15.354 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
01:35:15.358 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:35:15.358 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
01:35:15.432 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:35:15.433 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2633 ms
01:35:15.760 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
01:35:15.925 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
01:35:16.018 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
01:35:16.068 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
01:35:16.307 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
01:35:16.335 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
01:35:17.928 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@144dc2f7
01:35:17.932 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
01:35:19.232 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
01:35:22.856 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
01:35:23.342 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
01:35:24.185 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
01:35:24.185 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
01:35:24.479 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
01:35:24.613 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
01:35:24.661 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
01:35:25.274 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
01:35:25.373 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5b5752a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@daadcfc, org.springframework.security.web.context.SecurityContextHolderFilter@313d8bf, org.springframework.security.web.header.HeaderWriterFilter@44084477, org.springframework.web.filter.CorsFilter@4da9ddf5, org.springframework.security.web.csrf.CsrfFilter@47de972, org.springframework.security.web.authentication.logout.LogoutFilter@76b328e9, ru.anapa.autorent.config.JwtRequestFilter@ec5f944, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3a76d39, org.springframework.security.web.session.ConcurrentSessionFilter@7aaa6200, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@219f9031, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@36223e06, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@732e21c9, org.springframework.security.web.session.SessionManagementFilter@45eba3b7, org.springframework.security.web.access.ExceptionTranslationFilter@399371b3, org.springframework.security.web.access.intercept.AuthorizationFilter@72a265ea]
01:35:25.813 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
01:35:25.826 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
01:35:25.852 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 13.518 seconds (process running for 14.071)
01:35:26.046 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
01:35:26.132 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:35:26.208 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
01:35:26.236 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:35:26.339 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:35:26.441 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:35:26.533 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:35:26.595 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
01:35:26.627 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
01:35:26.630 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:35:26.731 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:35:26.836 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
01:35:26.836 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
01:35:26.837 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
01:35:27.031 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
01:35:27.609 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:35:28.512 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:35:29.099 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:35:29.747 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:35:30.136 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
01:35:30.137 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
01:35:30.137 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
01:35:30.137 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
01:35:30.138 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
01:35:30.139 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
01:35:30.140 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
01:35:30.140 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
01:35:30.244 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
01:35:30.360 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
01:35:30.473 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:35:30.589 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
01:35:30.696 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:35:31.015 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
01:35:31.020 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:35:31.128 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:35:31.237 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:35:31.345 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:35:31.444 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:35:31.542 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:35:31.643 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
01:35:31.740 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
01:35:31.840 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:35:32.134 [main] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
01:35:32.236 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
01:35:32.347 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
01:35:32.449 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
01:35:33.059 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
01:35:33.157 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
01:35:33.282 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
01:35:38.728 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
01:35:38.729 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
01:35:38.730 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
01:35:38.746 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:35:38.762 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:35:38.765 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:35:38.776 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:35:38.800 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:35:38.803 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:35:38.974 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:35:39.061 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:35:39.564 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:35:39.564 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:35:39.567 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:35:39.567 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:35:39.581 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:35:39.582 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:35:43.062 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:35:43.079 [http-nio-8080-exec-5] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:35:43.092 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:35:43.095 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:35:43.111 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - Login page requested
01:35:43.112 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:35:43.151 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:08.832 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:36:08.834 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:08.835 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:36:08.836 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:36:08.837 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:36:09.093 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:36:09.613 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:36:09.979 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:36:10.069 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:36:10.157 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:36:10.416 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:36:10.505 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:36:10.595 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:36:10.947 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:36:11.039 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:36:11.128 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:36:11.217 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:36:11.334 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:36:11.335 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:36:11.337 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:36:11.338 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:36:11.342 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:11.342 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:13.470 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:36:13.473 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:13.474 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:36:13.475 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:36:13.476 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:36:13.479 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:36:13.658 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:36:13.750 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:36:13.871 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:36:13.871 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:36:13.874 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:36:13.875 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:36:13.885 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:13.886 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:26.667 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:36:26.667 [http-nio-8080-exec-3] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:36:26.678 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:36:26.678 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:36:26.678 [http-nio-8080-exec-1] INFO  r.a.a.controller.AuthController - Login page requested
01:36:26.678 [http-nio-8080-exec-1] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:36:26.694 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:31.007 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/rental/53
01:36:31.010 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:31.011 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/rental/53
01:36:31.014 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:36:31.025 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:36:31.292 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:31.650 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:36:31.740 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:36:31.832 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:31.930 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:36:32.019 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:36:32.108 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:32.266 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:36:32.266 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:36:32.269 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:36:32.269 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:36:32.276 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:32.276 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:34.639 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/rental/53
01:36:34.642 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:34.643 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/rental/53
01:36:34.646 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:36:34.647 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:36:34.905 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:35.263 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:36:35.352 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:36:35.445 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:35.568 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:36:35.657 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:36:35.749 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:35.867 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:36:35.867 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:36:35.876 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:36:35.876 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:36:35.889 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:35.889 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:38.019 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/rental/53
01:36:38.022 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:38.023 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/rental/53
01:36:38.027 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:36:38.027 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:36:38.289 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:38.642 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:36:38.737 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:36:38.828 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:38.925 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:36:39.018 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:36:39.109 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:36:39.225 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:36:39.226 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:36:39.230 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:36:39.230 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:36:39.238 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:36:39.240 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:37:54.907 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
01:37:54.909 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
01:37:55.473 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
01:37:57.420 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
01:37:57.476 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 16488 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
01:37:57.476 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
01:37:57.477 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
01:37:58.827 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
01:37:58.947 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 110 ms. Found 15 JPA repository interfaces.
01:38:00.125 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
01:38:00.145 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
01:38:00.149 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:38:00.150 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
01:38:00.224 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:38:00.225 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2684 ms
01:38:00.552 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
01:38:00.713 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
01:38:00.803 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
01:38:00.852 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
01:38:01.085 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
01:38:01.114 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
01:38:02.690 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4b9ed99d
01:38:02.692 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
01:38:04.157 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
01:38:07.743 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
01:38:08.209 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
01:38:09.135 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
01:38:09.135 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
01:38:09.424 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
01:38:09.666 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
01:38:09.732 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
01:38:10.319 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
01:38:10.480 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5c609f47, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3004c204, org.springframework.security.web.context.SecurityContextHolderFilter@77547450, org.springframework.security.web.header.HeaderWriterFilter@7a013742, org.springframework.web.filter.CorsFilter@2a4ca4ca, org.springframework.security.web.csrf.CsrfFilter@e266ddd, org.springframework.security.web.authentication.logout.LogoutFilter@70a1e4f7, ru.anapa.autorent.config.JwtRequestFilter@4b85edeb, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@8e7a03, org.springframework.security.web.session.ConcurrentSessionFilter@43c66c44, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2b7be984, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2682b39c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@64209d58, org.springframework.security.web.session.SessionManagementFilter@4139d8f0, org.springframework.security.web.access.ExceptionTranslationFilter@7a5dff85, org.springframework.security.web.access.intercept.AuthorizationFilter@78ed3c71]
01:38:10.981 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
01:38:10.999 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
01:38:11.022 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 13.947 seconds (process running for 14.473)
01:38:11.098 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
01:38:11.099 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
01:38:11.266 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
01:38:11.377 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:38:11.413 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
01:38:11.542 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:11.680 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:11.783 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:38:11.908 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:38:12.005 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
01:38:12.072 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:38:14.142 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:14.766 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:38:17.217 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:17.578 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
01:38:17.578 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
01:38:17.578 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
01:38:17.579 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
01:38:17.579 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
01:38:17.579 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
01:38:17.579 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
01:38:17.579 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
01:38:17.762 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
01:38:18.121 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
01:38:18.145 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:38:18.241 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:38:18.334 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
01:38:18.427 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
01:38:18.527 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
01:38:18.618 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:38:18.716 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
01:38:18.808 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:19.080 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
01:38:19.083 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:38:19.179 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:38:19.274 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:38:19.369 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:38:19.460 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:38:19.552 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:38:19.646 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
01:38:19.740 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
01:38:19.834 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:20.110 [main] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
01:38:20.212 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
01:38:20.315 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
01:38:20.413 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
01:38:21.294 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
01:38:21.294 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
01:38:21.295 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
01:38:21.310 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/rental/53
01:38:21.327 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:21.330 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/rental/53
01:38:21.344 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:38:21.363 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:38:21.623 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:38:21.985 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:38:22.073 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:38:22.164 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:38:22.244 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
01:38:22.257 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:38:22.336 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
01:38:22.345 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:38:22.434 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:38:22.449 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
01:38:22.840 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:38:22.840 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:38:22.842 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:38:22.842 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:38:22.859 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:22.859 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:26.219 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:38:26.223 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:26.225 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:38:26.227 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:38:26.231 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:38:26.501 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:38:27.047 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:38:27.456 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:38:27.550 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:38:27.640 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:38:27.904 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:38:27.994 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:28.084 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:28.451 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:38:28.544 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:28.639 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:28.737 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:38:28.879 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:38:28.879 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:38:28.883 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:38:28.884 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:38:28.901 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:28.901 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:29.730 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/rentals
01:38:29.743 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:29.750 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/rentals
01:38:29.783 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminRentalController.listRentals(org.springframework.ui.Model,int,int,java.lang.String,java.lang.String); target is of class [ru.anapa.autorent.controller.AdminRentalController]
01:38:29.786 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminRentalController.listRentals(org.springframework.ui.Model,int,int,java.lang.String,java.lang.String); target is of class [ru.anapa.autorent.controller.AdminRentalController]
01:38:30.065 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.id desc 
    limit
        ?, ?
01:38:30.157 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:30.251 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:30.353 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0
01:38:30.805 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:38:30.805 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:38:30.808 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:38:30.808 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:38:30.813 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:30.813 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:37.960 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:38:37.963 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:37.964 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:38:37.965 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:38:37.966 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:38:38.231 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:38:38.761 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:38:39.115 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:38:39.210 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:38:39.304 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:38:39.576 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:38:39.665 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:39.754 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:40.119 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:38:40.208 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:40.301 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:40.405 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:38:40.539 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:38:40.539 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:38:40.543 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:38:40.543 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:38:40.553 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:40.557 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:43.293 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:38:43.296 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:43.297 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:38:43.298 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:38:43.300 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:38:43.305 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:38:43.481 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:43.572 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:43.725 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:38:43.725 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:38:43.728 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:38:43.728 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:38:43.734 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:43.736 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:47.570 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/rental/53
01:38:47.574 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:47.575 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/rental/53
01:38:47.579 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:38:47.580 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:38:47.847 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:38:48.199 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:38:48.292 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:38:48.384 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:38:48.483 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
01:38:48.573 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:38:48.667 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:38:48.783 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:38:48.784 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:38:48.787 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:38:48.787 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:38:48.796 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:48.799 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:54.241 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:38:54.243 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:54.245 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:38:54.245 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:38:54.246 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:38:54.251 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:38:54.429 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:38:54.519 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:38:54.632 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:38:54.632 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:38:54.635 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:38:54.635 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:38:54.641 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:54.641 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:38:56.524 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:38:56.546 [http-nio-8080-exec-1] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:38:56.557 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:38:56.559 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:38:56.561 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Login page requested
01:38:56.561 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:38:56.584 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:39:32.294 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/accounts
01:39:32.297 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:39:32.298 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/accounts
01:39:32.564 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0
01:39:32.655 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:32.750 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:32.840 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:32.933 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.022 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.113 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.204 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.297 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.391 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.483 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.579 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.668 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:33.761 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:34.185 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:39:34.185 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:39:34.187 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:39:34.187 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:39:34.193 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:39:34.193 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:39:40.071 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:39:40.073 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:39:40.074 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:39:40.076 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:39:40.086 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:39:40.351 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:39:40.882 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:39:41.248 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:39:41.340 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:39:41.434 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:39:41.701 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:39:41.792 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:39:41.884 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:42.241 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:39:42.332 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:39:42.423 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:39:42.523 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:39:42.636 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:39:42.636 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:39:42.638 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:39:42.639 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:39:42.648 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:39:42.648 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:41:31.692 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
01:41:31.708 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
01:41:32.251 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
01:41:35.334 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
01:41:35.381 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 4880 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
01:41:35.382 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
01:41:35.383 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
01:41:36.671 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
01:41:36.804 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 122 ms. Found 15 JPA repository interfaces.
01:41:38.052 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
01:41:38.074 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
01:41:38.083 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:41:38.083 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
01:41:38.172 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:41:38.172 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2733 ms
01:41:38.517 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
01:41:38.723 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
01:41:38.798 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
01:41:38.855 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
01:41:39.153 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
01:41:39.180 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
01:41:40.740 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4c3fcbe7
01:41:40.742 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
01:41:42.198 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
01:41:45.956 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
01:41:47.654 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
01:41:50.380 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
01:41:50.380 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
01:41:51.150 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
01:41:51.497 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
01:41:51.611 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
01:41:53.369 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
01:41:53.591 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@69ab59f7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@619f24c2, org.springframework.security.web.context.SecurityContextHolderFilter@d583496, org.springframework.security.web.header.HeaderWriterFilter@3f7cadad, org.springframework.web.filter.CorsFilter@1b1a077d, org.springframework.security.web.csrf.CsrfFilter@7ed91434, org.springframework.security.web.authentication.logout.LogoutFilter@77547450, ru.anapa.autorent.config.JwtRequestFilter@57416e49, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1746590c, org.springframework.security.web.session.ConcurrentSessionFilter@4c0c0193, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@77e6f22d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4e0a5927, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@32b0e533, org.springframework.security.web.session.SessionManagementFilter@53c4497d, org.springframework.security.web.access.ExceptionTranslationFilter@4d9e293c, org.springframework.security.web.access.intercept.AuthorizationFilter@d7d4fbc]
01:41:54.666 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
01:41:54.698 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
01:41:54.754 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 19.733 seconds (process running for 20.334)
01:41:54.919 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
01:41:54.919 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
01:41:55.017 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
01:41:55.287 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
01:41:55.300 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:41:55.407 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:41:55.539 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:41:55.672 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:41:55.770 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:41:55.847 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:41:55.861 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
01:41:56.587 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:41:57.141 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:41:58.759 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:41:59.122 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
01:41:59.122 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
01:41:59.122 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
01:41:59.122 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
01:41:59.122 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
01:41:59.122 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
01:41:59.122 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
01:41:59.123 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
01:41:59.222 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
01:41:59.264 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
01:41:59.264 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
01:41:59.265 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
01:41:59.306 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:41:59.334 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
01:41:59.347 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:41:59.358 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:41:59.406 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:41:59.430 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:41:59.479 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:41:59.566 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
01:41:59.633 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:41:59.661 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:41:59.810 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:41:59.903 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:41:59.956 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
01:42:00.139 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
01:42:00.499 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
01:42:00.511 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:42:00.617 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:42:00.712 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
01:42:00.722 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:42:00.818 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:42:00.914 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:42:00.975 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:42:00.983 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:42:01.034 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:01.032 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:42:01.058 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:42:01.060 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:42:01.071 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:01.128 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:42:01.221 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:42:01.321 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
01:42:01.420 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
01:42:01.515 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:01.797 [main] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
01:42:01.910 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
01:42:02.013 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
01:42:02.119 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
01:42:03.827 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
01:42:03.919 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
01:42:04.084 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
01:42:13.055 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/accounts
01:42:13.060 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:13.061 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/accounts
01:42:13.325 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0
01:42:13.417 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:13.511 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:13.604 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:13.694 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:13.788 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:13.879 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:13.976 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:14.067 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:14.160 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:14.251 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:14.348 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:14.441 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:14.533 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:14.959 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:42:14.960 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:42:14.963 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:42:14.965 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:42:14.975 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:14.976 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:16.918 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:42:16.923 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:16.928 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:42:16.931 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:42:16.940 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:42:17.209 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:42:17.732 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:42:18.123 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:42:18.216 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:42:18.310 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:42:18.579 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:42:18.669 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:42:18.759 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:19.131 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:42:19.222 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:42:19.313 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:19.413 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:42:19.563 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:42:19.563 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:42:19.565 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:42:19.566 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:42:19.576 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:19.577 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:20.920 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:42:20.923 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:20.924 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:42:20.926 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:42:20.927 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:42:20.930 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:42:21.111 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:42:21.202 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:42:21.321 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:42:21.321 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:42:21.325 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:42:21.325 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:42:21.335 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:42:21.335 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:43:07.009 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:43:07.026 [http-nio-8080-exec-1] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:43:07.036 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:43:07.039 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:43:07.042 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - Login page requested
01:43:07.043 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:43:07.074 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:43:40.729 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:43:40.737 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:43:40.740 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:43:40.743 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:43:40.744 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:43:40.748 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:43:40.926 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:43:41.016 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:43:41.158 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:43:41.158 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:43:41.163 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:43:41.167 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:43:41.177 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:43:41.180 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:44:13.039 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:44:13.041 [http-nio-8080-exec-7] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:44:13.050 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:44:13.052 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:44:13.054 [http-nio-8080-exec-3] INFO  r.a.a.controller.AuthController - Login page requested
01:44:13.054 [http-nio-8080-exec-3] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:44:13.059 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:44:23.382 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:44:23.383 [http-nio-8080-exec-2] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:44:23.392 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:44:23.393 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:44:23.393 [http-nio-8080-exec-1] INFO  r.a.a.controller.AuthController - Login page requested
01:44:23.393 [http-nio-8080-exec-1] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:44:23.395 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:47:28.152 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
01:47:28.154 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
01:47:28.611 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
01:47:30.940 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
01:47:31.002 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 21360 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
01:47:31.002 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
01:47:31.003 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
01:47:32.337 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
01:47:32.460 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 112 ms. Found 15 JPA repository interfaces.
01:47:33.688 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
01:47:33.707 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
01:47:33.710 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:47:33.710 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
01:47:33.790 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:47:33.790 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2730 ms
01:47:34.134 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
01:47:34.326 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
01:47:34.443 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
01:47:34.506 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
01:47:34.934 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
01:47:34.979 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
01:47:36.615 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@51c6e775
01:47:36.616 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
01:47:38.045 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
01:47:41.625 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
01:47:42.123 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
01:47:43.061 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
01:47:43.061 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
01:47:43.404 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
01:47:43.538 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
01:47:43.581 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
01:47:44.238 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
01:47:44.343 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@482d1bb9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7c3c5f1e, org.springframework.security.web.context.SecurityContextHolderFilter@45eba3b7, org.springframework.security.web.header.HeaderWriterFilter@5358e41e, org.springframework.web.filter.CorsFilter@78ed3c71, org.springframework.security.web.csrf.CsrfFilter@2528c5eb, org.springframework.security.web.authentication.logout.LogoutFilter@29e0375f, ru.anapa.autorent.config.JwtRequestFilter@7b451bf4, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@123a3b3d, org.springframework.security.web.session.ConcurrentSessionFilter@4e0a5927, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@569168c0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@66ed73c1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@8e7a03, org.springframework.security.web.session.SessionManagementFilter@6ae9c300, org.springframework.security.web.access.ExceptionTranslationFilter@4275f7b2, org.springframework.security.web.access.intercept.AuthorizationFilter@6b02fa60]
01:47:44.812 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
01:47:44.827 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
01:47:44.845 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 14.238 seconds (process running for 14.798)
01:47:45.040 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
01:47:45.159 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
01:47:45.160 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:47:45.264 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:47:45.272 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
01:47:45.380 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:47:45.384 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:47:45.489 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
01:47:45.490 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:47:45.579 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:47:45.583 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:47:45.667 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
01:47:45.869 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
01:47:46.072 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
01:47:46.451 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
01:47:46.534 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:47:46.635 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:47:46.733 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
01:47:46.733 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
01:47:46.733 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
01:47:46.923 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
01:47:47.496 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:47:48.285 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:47:48.848 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:47:49.297 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:47:49.714 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
01:47:49.715 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
01:47:49.715 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
01:47:49.715 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
01:47:49.715 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
01:47:49.715 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
01:47:49.715 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
01:47:49.715 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
01:47:49.717 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:47:49.827 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:47:49.937 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:47:50.049 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:47:50.158 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:47:50.265 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:47:50.376 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
01:47:50.486 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
01:47:50.594 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:47:50.912 [main] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
01:47:51.027 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
01:47:51.139 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
01:47:51.254 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
01:47:53.460 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
01:47:53.557 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
01:47:53.679 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
01:48:08.788 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
01:48:08.788 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
01:48:08.789 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
01:48:08.803 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:48:08.822 [http-nio-8080-exec-1] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:48:08.832 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:48:08.842 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:48:08.868 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Login page requested
01:48:08.868 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:48:09.256 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:48:12.239 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:48:12.282 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:48:12.288 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:48:12.291 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:48:12.311 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:48:12.318 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:48:12.491 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:48:12.581 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:48:12.813 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:48:12.813 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:48:12.817 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:48:12.817 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:48:12.874 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:48:12.874 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:48:14.474 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:48:14.477 [http-nio-8080-exec-4] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:48:14.485 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:48:14.490 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:48:14.492 [http-nio-8080-exec-7] INFO  r.a.a.controller.AuthController - Login page requested
01:48:14.493 [http-nio-8080-exec-7] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:48:14.504 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:48:19.545 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
01:48:19.555 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
01:48:20.230 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
01:48:22.658 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
01:48:22.747 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 19916 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
01:48:22.748 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
01:48:22.749 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
01:48:24.053 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
01:48:24.190 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 125 ms. Found 15 JPA repository interfaces.
01:48:25.333 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
01:48:25.346 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
01:48:25.350 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:48:25.350 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
01:48:25.431 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:48:25.431 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2623 ms
01:48:25.759 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
01:48:25.922 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
01:48:26.002 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
01:48:26.057 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
01:48:26.270 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
01:48:26.309 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
01:48:27.967 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@39b95a80
01:48:27.970 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
01:48:29.282 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
01:48:33.503 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
01:48:33.949 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
01:48:34.772 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
01:48:34.772 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
01:48:35.083 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
01:48:35.235 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
01:48:35.277 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
01:48:35.872 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
01:48:35.964 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@74b4931d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@8ea6dac, org.springframework.security.web.context.SecurityContextHolderFilter@2963a8da, org.springframework.security.web.header.HeaderWriterFilter@608e7e46, org.springframework.web.filter.CorsFilter@38f563e4, org.springframework.security.web.csrf.CsrfFilter@569168c0, org.springframework.security.web.authentication.logout.LogoutFilter@68a7cd0, ru.anapa.autorent.config.JwtRequestFilter@5731caaf, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2df593ac, org.springframework.security.web.session.ConcurrentSessionFilter@2a117d87, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7c3c5f1e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1e541278, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4e60caa4, org.springframework.security.web.session.SessionManagementFilter@1e127c1b, org.springframework.security.web.access.ExceptionTranslationFilter@742ff968, org.springframework.security.web.access.intercept.AuthorizationFilter@1ac28535]
01:48:36.392 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
01:48:36.403 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
01:48:36.420 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 14.107 seconds (process running for 14.663)
01:48:36.639 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
01:48:36.707 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
01:48:36.708 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:48:36.819 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
01:48:36.824 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:48:36.919 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:48:36.935 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:48:37.031 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
01:48:37.040 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:48:37.122 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:48:37.136 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:48:37.232 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
01:48:37.400 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
01:48:37.597 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
01:48:37.961 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
01:48:38.006 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:48:38.105 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:48:38.210 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
01:48:38.210 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
01:48:38.210 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
01:48:38.395 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
01:48:38.950 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:48:39.698 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:48:40.250 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:48:42.529 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:48:42.906 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
01:48:42.906 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
01:48:42.906 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
01:48:42.906 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
01:48:42.906 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
01:48:42.907 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
01:48:42.908 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
01:48:42.908 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
01:48:42.923 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:48:43.020 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:48:43.117 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:48:43.220 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:48:43.313 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:48:43.408 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:48:43.505 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
01:48:43.603 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
01:48:43.698 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:48:43.977 [main] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
01:48:44.083 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
01:48:44.184 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
01:48:44.300 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
01:48:46.657 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
01:48:46.749 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
01:48:46.887 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
01:49:07.771 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
01:49:07.771 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
01:49:07.772 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
01:49:07.787 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:49:07.805 [http-nio-8080-exec-1] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:49:07.815 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:49:07.820 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:49:07.837 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Login page requested
01:49:07.837 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:49:08.250 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:49:20.311 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:49:20.312 [http-nio-8080-exec-4] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:49:20.324 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:49:20.326 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:49:20.326 [http-nio-8080-exec-5] INFO  r.a.a.controller.AuthController - Login page requested
01:49:20.326 [http-nio-8080-exec-5] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:49:20.330 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:50:58.646 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/rentals
01:50:58.653 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:50:58.665 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/rentals
01:50:58.673 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminRentalController.listRentals(org.springframework.ui.Model,int,int,java.lang.String,java.lang.String); target is of class [ru.anapa.autorent.controller.AdminRentalController]
01:50:58.712 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminRentalController.listRentals(org.springframework.ui.Model,int,int,java.lang.String,java.lang.String); target is of class [ru.anapa.autorent.controller.AdminRentalController]
01:50:59.011 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.id desc 
    limit
        ?, ?
01:50:59.113 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:50:59.212 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:50:59.330 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0
01:51:00.015 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:51:00.015 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:51:00.029 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:51:00.030 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:51:00.098 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:00.098 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:05.643 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:51:05.647 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:05.648 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:51:05.654 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:51:05.657 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:51:05.947 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:51:06.513 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:51:06.910 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:51:07.018 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:51:07.145 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:51:07.435 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:51:07.541 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:51:07.640 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:08.064 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:51:08.163 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:51:08.261 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:08.370 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:51:08.580 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:51:08.586 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:51:08.607 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:51:08.614 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:51:08.645 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:08.647 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:11.572 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users
01:51:11.576 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:11.577 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users
01:51:11.582 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.listUsers(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:51:11.584 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.listUsers(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:51:11.585 [http-nio-8080-exec-2] DEBUG r.anapa.autorent.service.UserService - Получение списка всех пользователей
01:51:11.885 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0
01:51:11.982 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.084 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.184 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.283 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.380 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.485 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.588 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.686 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.786 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.886 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:12.984 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:13.085 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:13.185 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:51:13.618 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:51:13.618 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:51:13.627 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:51:13.627 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:51:13.635 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:13.640 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:18.825 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:51:18.830 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:18.832 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:51:18.833 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:51:18.835 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:51:18.840 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:51:19.034 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:51:19.132 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:19.306 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:51:19.308 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:51:19.311 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:51:19.312 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:51:19.326 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:19.329 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:21.709 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/accounts
01:51:21.712 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:21.712 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/accounts
01:51:21.998 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0
01:51:22.095 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.193 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.290 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.388 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.487 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.583 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.680 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.779 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.878 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:22.976 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:23.072 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:23.175 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:23.273 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:51:23.750 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:51:23.753 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:51:23.760 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:51:23.763 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:51:23.777 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:51:23.778 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:52:21.028 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
01:52:21.030 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
01:52:21.576 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
01:52:23.410 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
01:52:23.473 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 18316 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
01:52:23.473 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
01:52:23.474 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
01:52:24.728 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
01:52:24.853 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 113 ms. Found 15 JPA repository interfaces.
01:52:25.989 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
01:52:26.006 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
01:52:26.009 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:52:26.010 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
01:52:26.098 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:52:26.099 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2571 ms
01:52:26.463 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
01:52:26.667 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
01:52:26.743 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
01:52:26.792 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
01:52:27.040 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
01:52:27.083 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
01:52:28.763 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@188ae8d2
01:52:28.769 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
01:52:30.390 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
01:52:34.075 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
01:52:35.251 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
01:52:37.910 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
01:52:37.910 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
01:52:38.922 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
01:52:39.429 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
01:52:39.577 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
01:52:41.662 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
01:52:41.981 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1191c0d7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@e3c4681, org.springframework.security.web.context.SecurityContextHolderFilter@54c577ee, org.springframework.security.web.header.HeaderWriterFilter@7a5dff85, org.springframework.web.filter.CorsFilter@304542ec, org.springframework.security.web.csrf.CsrfFilter@444eb4b3, org.springframework.security.web.authentication.logout.LogoutFilter@d7d4fbc, ru.anapa.autorent.config.JwtRequestFilter@21e484b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7c3c5f1e, org.springframework.security.web.session.ConcurrentSessionFilter@6634bfeb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@77547450, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7fd9f4db, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3004c204, org.springframework.security.web.session.SessionManagementFilter@7a013742, org.springframework.security.web.access.ExceptionTranslationFilter@2a4cc4fb, org.springframework.security.web.access.intercept.AuthorizationFilter@5d5b21c1]
01:52:43.160 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
01:52:43.188 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
01:52:43.256 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 20.152 seconds (process running for 20.696)
01:52:43.506 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
01:52:43.765 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:52:43.766 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
01:52:43.885 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:52:43.892 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
01:52:44.027 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:52:44.037 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:52:44.192 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
01:52:44.193 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:52:44.287 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:52:44.294 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:52:44.384 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
01:52:44.579 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
01:52:44.780 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
01:52:45.153 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
01:52:45.264 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:52:45.416 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:52:45.520 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
01:52:45.520 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
01:52:45.520 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
01:52:45.698 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
01:52:46.266 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:52:47.137 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:52:47.694 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:52:48.123 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:52:48.528 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
01:52:48.529 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
01:52:48.530 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
01:52:48.530 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
01:52:48.530 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
01:52:48.530 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
01:52:48.530 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
01:52:48.531 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
01:52:48.538 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:52:48.647 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:52:48.756 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:52:48.873 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:52:48.979 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:52:49.087 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:52:49.201 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
01:52:49.298 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
01:52:49.397 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:52:49.682 [main] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
01:52:49.789 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
01:52:49.897 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
01:52:50.006 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
01:52:50.565 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
01:52:50.663 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
01:52:50.805 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
01:53:51.456 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
01:53:51.457 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
01:53:51.459 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
01:53:51.498 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
01:53:51.564 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:53:51.581 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
01:53:51.630 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:53:51.709 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
01:53:51.979 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
01:53:52.506 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
01:53:52.893 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
01:53:52.985 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:53:53.066 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:53:53.338 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:53:53.418 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:53:53.515 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:53:53.882 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
01:53:53.961 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:53:54.057 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:53:54.164 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
01:53:54.637 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:53:54.638 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:53:54.641 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:53:54.641 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:53:54.658 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:53:54.659 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:53:57.567 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
01:53:57.570 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:53:57.571 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
01:53:57.572 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:53:57.574 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
01:53:57.576 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
01:53:57.756 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:53:57.846 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:53:57.972 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
01:53:57.972 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
01:53:57.974 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
01:53:57.976 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
01:53:57.979 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:53:57.980 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:54:01.754 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
01:54:01.762 [http-nio-8080-exec-7] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
01:54:01.768 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
01:54:01.769 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
01:54:01.770 [http-nio-8080-exec-8] INFO  r.a.a.controller.AuthController - Login page requested
01:54:01.770 [http-nio-8080-exec-8] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
01:54:01.781 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=D8B9E2C86443F299EBB413A0E9615D10], Granted Authorities=[ROLE_ADMIN]]]
01:58:51.980 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
01:58:51.993 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
01:58:52.459 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
01:58:54.194 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
01:58:54.254 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 1312 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
01:58:54.255 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
01:58:54.256 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
01:58:55.389 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
01:58:55.562 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 160 ms. Found 15 JPA repository interfaces.
01:58:56.832 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
01:58:56.846 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
01:58:56.849 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:58:56.849 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
01:58:56.945 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:58:56.946 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2623 ms
01:58:57.131 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
01:58:57.243 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
01:58:57.290 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
01:58:57.315 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
01:58:57.496 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
01:58:57.524 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
01:58:59.064 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@15ee8861
01:58:59.074 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
01:59:00.510 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
01:59:04.352 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
01:59:04.701 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
01:59:05.499 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
01:59:05.499 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
01:59:05.779 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
01:59:05.900 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
01:59:05.933 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
01:59:06.502 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
01:59:06.658 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@fcc981a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4da18e2c, org.springframework.security.web.context.SecurityContextHolderFilter@358720a0, org.springframework.security.web.header.HeaderWriterFilter@11d0a25e, org.springframework.web.filter.CorsFilter@2d5580f6, org.springframework.security.web.csrf.CsrfFilter@2d751681, org.springframework.security.web.authentication.logout.LogoutFilter@765a09fc, ru.anapa.autorent.config.JwtRequestFilter@278fe428, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@678f4876, org.springframework.security.web.session.ConcurrentSessionFilter@30b32799, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@70f15b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4ab8b70e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@638a98d7, org.springframework.security.web.session.SessionManagementFilter@40f5b4ad, org.springframework.security.web.access.ExceptionTranslationFilter@1ec6b7b6, org.springframework.security.web.access.intercept.AuthorizationFilter@1b7440c3]
01:59:07.095 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
01:59:07.105 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
01:59:07.120 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 13.168 seconds (process running for 13.59)
01:59:07.315 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
01:59:07.390 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:59:07.429 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
01:59:07.496 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:59:07.601 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:59:07.718 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
01:59:07.781 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
01:59:07.811 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:59:07.812 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
01:59:07.901 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
01:59:07.909 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:08.004 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
01:59:08.004 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
01:59:08.005 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
01:59:08.180 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
01:59:08.710 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:59:09.549 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:59:10.080 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
01:59:10.533 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:59:10.883 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
01:59:10.883 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
01:59:10.883 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
01:59:10.883 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
01:59:10.883 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
01:59:10.883 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
01:59:10.883 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
01:59:10.883 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
01:59:10.981 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
01:59:11.080 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
01:59:11.171 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
01:59:11.269 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
01:59:11.371 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:59:11.664 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
01:59:11.664 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:59:11.769 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:59:11.882 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:59:11.997 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
01:59:12.095 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
01:59:12.201 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
01:59:12.292 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
01:59:12.386 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
01:59:12.477 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
01:59:12.746 [main] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
01:59:12.844 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
01:59:12.941 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
01:59:13.035 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
01:59:13.484 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
01:59:13.574 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
01:59:13.682 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
01:59:40.531 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
01:59:40.531 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
01:59:40.531 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
01:59:40.554 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /
01:59:40.567 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
01:59:40.567 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /
01:59:40.611 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.description,
        c1_0.image,
        c1_0.name,
        c1_0.updated_at 
    from
        categories c1_0 
    left join
        rental_items ri1_0 
            on c1_0.id=ri1_0.category_id 
    group by
        c1_0.id 
    order by
        count(ri1_0.id) desc
01:59:40.792 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
    order by
        (select
            count(1) 
        from
            rentals r1_0 
        where
            ri1_0.id=r1_0.item_id) desc
01:59:40.898 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
    order by
        ri1_0.created_at desc
01:59:40.997 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
        and ri1_0.is_promotional=1
01:59:41.088 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        distinct c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    left join
        car_images i1_0 
            on c1_0.id=i1_0.car_id
01:59:41.841 [http-nio-8080-exec-1] DEBUG r.anapa.autorent.service.UserService - Получение списка всех пользователей
01:59:42.033 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0
01:59:42.126 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.219 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.315 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.409 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.491 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.593 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.695 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.792 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.887 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:42.983 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:43.074 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:43.172 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:43.259 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
01:59:43.813 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
01:59:43.907 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
01:59:43.991 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:00:00.015 [scheduling-1] INFO  r.a.a.service.DailyPaymentService - [Scheduler] Актуализация всех не обработанных платежей (PENDING/FAILED)
02:00:00.019 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:00:00.196 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:00:00.302 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:00:00.401 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:00:00.478 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:00:00.582 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:00:00.681 [scheduling-1] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:00:00.776 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:00:00.869 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:00:01.138 [scheduling-1] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
02:00:01.228 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:00:01.329 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:00:01.423 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:00:02.076 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:00:02.169 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:00:02.270 [scheduling-1] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:00:02.546 [scheduling-1] INFO  r.a.autorent.config.ScheduledTasks - Запуск синхронизации статусов автомобилей
02:00:02.638 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:00:02.739 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:00:02.832 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:00:02.929 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:00:03.016 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:00:03.291 [scheduling-1] INFO  r.a.autorent.config.ScheduledTasks - Синхронизация статусов автомобилей завершена успешно
02:00:03.382 [scheduling-1] INFO  r.a.a.service.PasswordResetService - Начинаем очистку старых логов восстановления пароля
02:00:03.389 [scheduling-1] ERROR r.a.a.service.PasswordResetService - Ошибка при очистке старых логов восстановления пароля
org.springframework.dao.InvalidDataAccessApiUsageException: Expecting a SELECT query : `DELETE FROM PasswordResetLog p WHERE p.createdAt < :cutoffDate`
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:368)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy181.deleteOldLogs(Unknown Source)
	at ru.anapa.autorent.service.PasswordResetService.cleanupOldPasswordResetLogs(PasswordResetService.java:332)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ru.anapa.autorent.service.PasswordResetService$$SpringCGLIB$$0.cleanupOldPasswordResetLogs(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:499)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.IllegalStateException: Expecting a SELECT query : `DELETE FROM PasswordResetLog p WHERE p.createdAt < :cutoffDate`
	at org.hibernate.query.sqm.internal.QuerySqmImpl.verifySelect(QuerySqmImpl.java:493)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:498)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 39 common frames omitted
Caused by: org.hibernate.query.IllegalSelectQueryException: Expecting a SELECT Query [org.hibernate.query.sqm.tree.select.SqmSelectStatement], but found org.hibernate.query.sqm.tree.delete.SqmDeleteStatement [DELETE FROM PasswordResetLog p WHERE p.createdAt < :cutoffDate]
	at org.hibernate.query.sqm.internal.SqmUtil.verifyIsSelectStatement(SqmUtil.java:98)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.verifySelect(QuerySqmImpl.java:489)
	... 58 common frames omitted
02:00:04.956 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:00:04.958 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:00:05.003 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments?continue to session
02:00:05.004 [http-nio-8080-exec-2] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:00:05.015 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:00:05.018 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:00:05.018 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:00:05.018 [http-nio-8080-exec-7] INFO  r.a.a.controller.AuthController - Login page requested
02:00:24.338 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:00:24.342 [http-nio-8080-exec-4] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
02:00:24.351 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:00:24.352 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:00:24.353 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:00:24.353 [http-nio-8080-exec-5] INFO  r.a.a.controller.AuthController - Login page requested
02:00:24.353 [http-nio-8080-exec-5] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
02:00:27.238 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:00:27.243 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:00:27.249 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments?continue to session
02:00:27.250 [http-nio-8080-exec-3] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:00:27.262 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:00:27.268 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:00:27.273 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:00:27.276 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - Login page requested
02:00:27.335 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:00:27.336 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:00:27.340 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:00:27.340 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:00:27.345 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:00:27.345 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:00:29.358 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
02:00:29.717 [http-nio-8080-exec-10] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
02:00:29.721 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:00:29.814 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:00:29.920 [http-nio-8080-exec-10] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
02:00:29.924 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
02:00:30.387 [http-nio-8080-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
02:00:30.389 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.s.ChangeSessionIdAuthenticationStrategy - Changed session id from 8E3710B961517C756412C1AA8009654C
02:00:30.390 [http-nio-8080-exec-10] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session 6A5094E4F4AD5B6516F1C735F58E097F, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
02:00:30.391 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
02:00:30.393 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@67f16198]
02:00:30.396 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]
02:00:30.404 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
02:00:30.410 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]]
02:00:30.413 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
02:00:30.424 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:00:30.437 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:00:30.619 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
02:00:31.171 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
02:00:31.544 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
02:00:31.637 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:00:31.730 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:00:32.008 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:00:32.104 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:00:32.203 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:00:32.575 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
02:00:32.671 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:00:32.771 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:00:32.873 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
02:00:33.028 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:00:33.028 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:00:33.033 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:00:33.033 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:00:33.041 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]]
02:00:33.047 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]]
02:00:36.316 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:00:36.320 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]]
02:00:36.322 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:00:36.327 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:00:36.330 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:00:36.338 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:00:36.527 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:00:36.624 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:00:36.766 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:00:36.766 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:00:36.770 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:00:36.770 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:00:36.779 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]]
02:00:36.780 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]]
02:00:38.763 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:00:38.768 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=8E3710B961517C756412C1AA8009654C], Granted Authorities=[ROLE_ADMIN]]]
02:00:38.771 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
02:00:38.773 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:00:38.776 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:00:38.962 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:00:39.057 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:00:39.151 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:00:39.248 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:00:39.341 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:00:39.438 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:00:39.444 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:00:39.535 [http-nio-8080-exec-6] ERROR r.a.a.service.DailyPaymentService - Ошибка при обработке платежа ID 3: Credit limit exceeded
02:01:59.865 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:01:59.959 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 3724 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:01:59.966 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:01:59.966 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:02:00.940 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:02:01.051 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 101 ms. Found 15 JPA repository interfaces.
02:02:01.803 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:02:01.815 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:02:01.821 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:02:01.822 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:02:01.902 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:02:01.904 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1873 ms
02:02:02.102 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:02:02.230 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:02:02.297 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:02:02.327 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:02:02.526 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:02:02.543 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:02:04.095 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@c79780
02:02:04.111 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:02:05.631 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:02:09.235 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:02:09.788 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:02:10.735 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:02:10.735 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:02:11.100 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:02:11.235 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:02:11.280 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:02:11.819 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:02:11.938 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@cfe4244, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@70f15b, org.springframework.security.web.context.SecurityContextHolderFilter@5bf7d08f, org.springframework.security.web.header.HeaderWriterFilter@1641ee27, org.springframework.web.filter.CorsFilter@72eca02d, org.springframework.security.web.csrf.CsrfFilter@4e38fad, org.springframework.security.web.authentication.logout.LogoutFilter@1019657, ru.anapa.autorent.config.JwtRequestFilter@5896cb9c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@25f475a6, org.springframework.security.web.session.ConcurrentSessionFilter@643c5b25, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4d612a93, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2d751681, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4d456d2b, org.springframework.security.web.session.SessionManagementFilter@6334178e, org.springframework.security.web.access.ExceptionTranslationFilter@a5de4af, org.springframework.security.web.access.intercept.AuthorizationFilter@54dd239c]
02:02:12.399 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:02:12.399 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:02:12.435 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 12.943 seconds (process running for 13.438)
02:02:12.488 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:02:12.488 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:02:12.621 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:02:12.710 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:02:12.778 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:02:12.822 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:02:12.938 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:02:13.055 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:02:13.153 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:02:13.231 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:02:13.312 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:02:14.035 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:02:14.567 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:02:16.249 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:02:16.648 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:02:16.648 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:02:16.649 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:02:16.649 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:02:16.650 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:02:16.650 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:02:16.650 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:02:16.651 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:02:16.839 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:02:17.222 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:02:17.258 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:02:17.366 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:02:17.465 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:02:17.558 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:02:17.660 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:02:17.765 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:02:17.880 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:02:17.973 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:02:18.249 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:02:18.250 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:02:18.253 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:02:18.348 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:02:18.439 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:02:18.549 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:02:18.645 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:02:18.740 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:02:18.833 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:02:18.840 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:02:18.936 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:02:19.028 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:02:19.303 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:02:19.399 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:02:19.502 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:02:19.589 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:02:21.461 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:02:21.552 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:02:21.675 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:02:21.964 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:02:21.964 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:03:41.968 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:03:41.968 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:03:41.968 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
02:03:41.983 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:03:41.998 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:03:41.998 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 6A5094E4F4AD5B6516F1C735F58E097F
02:03:42.038 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments?continue to session
02:03:42.038 [http-nio-8080-exec-1] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:03:42.038 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:03:42.054 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:03:42.059 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:03:42.071 [http-nio-8080-exec-4] INFO  r.a.a.controller.AuthController - Login page requested
02:03:42.296 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:03:42.296 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:03:42.296 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:03:42.296 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:03:42.296 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:03:42.296 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:03:44.194 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
02:03:44.562 [http-nio-8080-exec-6] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
02:03:44.567 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:03:44.659 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:03:44.759 [http-nio-8080-exec-6] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
02:03:44.764 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
02:03:45.171 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
02:03:45.173 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.s.ChangeSessionIdAuthenticationStrategy - Changed session id from 4589E9C5D5EEF03D5C1267E94E7EB322
02:03:45.174 [http-nio-8080-exec-6] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session 7A7243DBE8D3F3BE09BD57F39B150152, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
02:03:45.178 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
02:03:45.180 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@565937c9]
02:03:45.181 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]
02:03:45.201 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
02:03:45.207 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]]
02:03:45.209 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
02:03:45.216 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:03:45.238 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:03:45.421 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
02:03:45.951 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
02:03:46.330 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
02:03:46.424 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:03:46.515 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:03:46.784 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:03:46.879 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:03:46.973 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:03:47.344 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
02:03:47.434 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:03:47.525 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:03:47.625 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
02:03:47.802 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:03:47.804 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:03:47.808 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:03:47.810 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:03:47.825 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]]
02:03:47.825 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]]
02:03:51.441 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:03:51.465 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]]
02:03:51.471 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:03:51.475 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:03:51.477 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:03:51.481 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:03:51.657 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:03:51.745 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:03:51.882 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:03:51.883 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:03:51.887 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:03:51.889 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:03:51.908 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]]
02:03:51.912 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]]
02:03:53.733 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:03:53.738 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=4589E9C5D5EEF03D5C1267E94E7EB322], Granted Authorities=[ROLE_ADMIN]]]
02:03:53.742 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
02:03:53.749 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:03:53.753 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:03:53.927 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:03:53.930 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:03:54.018 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:03:54.112 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:03:54.212 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:03:54.302 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:03:54.394 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:03:54.395 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:03:54.400 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:03:54.491 [http-nio-8080-exec-4] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:03:54.495 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:03:54.496 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:06:44.164 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:06:44.215 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 21196 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:06:44.216 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:06:44.217 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:06:45.484 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:06:45.610 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 114 ms. Found 15 JPA repository interfaces.
02:06:46.806 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:06:46.819 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:06:46.823 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:06:46.824 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:06:46.904 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:06:46.904 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2635 ms
02:06:47.226 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:06:47.405 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:06:47.486 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:06:47.536 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:06:47.813 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:06:47.851 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:06:49.428 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7df5549e
02:06:49.431 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:06:50.707 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:06:54.389 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:06:54.891 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:06:55.767 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:06:55.767 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:06:56.070 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:06:56.207 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:06:56.249 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:06:56.852 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:06:56.964 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@8fd4fac, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4c92c66f, org.springframework.security.web.context.SecurityContextHolderFilter@32b0e533, org.springframework.security.web.header.HeaderWriterFilter@5bc28b97, org.springframework.web.filter.CorsFilter@1ac28535, org.springframework.security.web.csrf.CsrfFilter@4678320a, org.springframework.security.web.authentication.logout.LogoutFilter@64209d58, ru.anapa.autorent.config.JwtRequestFilter@33e50ff2, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4a43aaad, org.springframework.security.web.session.ConcurrentSessionFilter@317fe2c1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@431fc271, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2f8b78f7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2df593ac, org.springframework.security.web.session.SessionManagementFilter@3c546124, org.springframework.security.web.access.ExceptionTranslationFilter@2682b39c, org.springframework.security.web.access.intercept.AuthorizationFilter@756e526]
02:06:57.437 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:06:57.444 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
02:06:57.448 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
02:06:57.451 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
02:06:59.438 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
02:06:59.462 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
02:06:59.479 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

02:07:17.536 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:07:17.604 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 3284 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:07:17.605 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:07:17.606 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:07:19.399 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:07:19.607 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 194 ms. Found 15 JPA repository interfaces.
02:07:21.155 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:07:21.169 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:07:21.173 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:07:21.173 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:07:21.255 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:07:21.255 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3589 ms
02:07:21.609 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:07:21.815 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:07:21.912 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:07:21.961 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:07:22.326 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:07:22.369 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:07:24.042 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@34ede267
02:07:24.043 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:07:25.654 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:07:29.399 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:07:29.937 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:07:31.123 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:07:31.123 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:07:31.461 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:07:31.638 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:07:31.711 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:07:32.860 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:07:33.157 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1191c0d7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@e3c4681, org.springframework.security.web.context.SecurityContextHolderFilter@54c577ee, org.springframework.security.web.header.HeaderWriterFilter@7a5dff85, org.springframework.web.filter.CorsFilter@304542ec, org.springframework.security.web.csrf.CsrfFilter@444eb4b3, org.springframework.security.web.authentication.logout.LogoutFilter@d7d4fbc, ru.anapa.autorent.config.JwtRequestFilter@5fd18419, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7c3c5f1e, org.springframework.security.web.session.ConcurrentSessionFilter@6634bfeb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@77547450, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7fd9f4db, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3004c204, org.springframework.security.web.session.SessionManagementFilter@7a013742, org.springframework.security.web.access.ExceptionTranslationFilter@2a4cc4fb, org.springframework.security.web.access.intercept.AuthorizationFilter@5d5b21c1]
02:07:34.577 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:07:34.613 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:07:34.678 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 17.491 seconds (process running for 18.02)
02:07:34.957 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:07:35.220 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:07:35.221 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:07:35.349 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:07:35.352 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:07:35.471 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:07:35.514 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:07:35.618 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:07:35.637 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:07:35.714 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:07:35.737 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:07:35.832 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:07:36.016 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:07:36.016 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:07:36.016 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:07:36.228 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:07:36.801 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:07:37.563 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:07:38.130 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:07:39.813 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:07:40.190 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:07:40.190 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:07:40.190 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:07:40.190 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:07:40.190 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:07:40.190 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:07:40.190 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:07:40.190 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:07:40.398 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:07:40.839 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:07:40.931 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:07:41.107 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:07:41.209 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:07:41.210 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:07:41.214 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:07:41.325 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:07:41.428 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:07:41.541 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:07:41.642 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:07:41.744 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:07:41.847 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:07:41.847 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:07:41.951 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:07:42.058 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:07:42.374 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:07:42.484 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:07:42.602 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:07:42.713 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:07:44.159 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:07:44.259 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:07:44.408 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:07:44.737 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:07:44.737 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:07:54.270 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:07:54.273 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:07:54.276 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
02:07:54.305 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:07:54.338 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:07:54.338 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 7A7243DBE8D3F3BE09BD57F39B150152
02:07:54.350 [http-nio-8080-exec-3] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:07:54.358 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:07:54.360 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:07:54.361 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 7A7243DBE8D3F3BE09BD57F39B150152
02:07:54.367 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:07:54.387 [http-nio-8080-exec-4] INFO  r.a.a.controller.AuthController - Login page requested
02:08:50.006 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:08:50.011 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:08:50.011 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 7A7243DBE8D3F3BE09BD57F39B150152
02:08:50.012 [http-nio-8080-exec-6] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:08:50.016 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:08:50.017 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:08:50.017 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 7A7243DBE8D3F3BE09BD57F39B150152
02:08:50.018 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:08:50.018 [http-nio-8080-exec-5] INFO  r.a.a.controller.AuthController - Login page requested
02:09:22.735 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:09:22.738 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:09:22.738 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 7A7243DBE8D3F3BE09BD57F39B150152
02:09:22.835 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments?continue to session
02:09:22.835 [http-nio-8080-exec-1] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:09:22.835 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:09:22.850 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:09:22.850 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:09:22.860 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Login page requested
02:09:22.891 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:09:22.891 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:09:22.893 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:09:22.893 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:09:22.895 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:09:22.895 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:09:24.959 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
02:09:25.380 [http-nio-8080-exec-9] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
02:09:25.383 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:09:25.476 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:09:25.579 [http-nio-8080-exec-9] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
02:09:25.581 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
02:09:26.039 [http-nio-8080-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
02:09:26.041 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.s.ChangeSessionIdAuthenticationStrategy - Changed session id from 9D9826C5AD53DF3FF1B0AC02A884E55E
02:09:26.042 [http-nio-8080-exec-9] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session 556135EB3DB766D1DF1065EA1B25E8A9, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
02:09:26.050 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
02:09:26.052 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@3bde165]
02:09:26.052 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]
02:09:26.062 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
02:09:26.067 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:26.069 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
02:09:26.074 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:09:26.100 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:09:26.288 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
02:09:26.848 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
02:09:27.242 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
02:09:27.336 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:09:27.436 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:09:27.719 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:09:27.815 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:09:27.910 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:09:28.296 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
02:09:28.392 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:09:28.495 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:09:28.601 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
02:09:28.782 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:09:28.784 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:09:28.787 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:09:28.787 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:09:28.801 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:28.801 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:30.896 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:09:30.901 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:30.902 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:09:30.903 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:09:30.904 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:09:30.908 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:09:31.098 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:09:31.194 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:09:31.360 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:09:31.360 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:09:31.363 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:09:31.363 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:09:31.377 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:31.377 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:34.264 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:09:34.272 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:34.274 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
02:09:34.278 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:09:34.283 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:09:34.284 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:09:34.291 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:09:34.481 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:09:34.577 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:09:34.680 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:09:34.777 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:09:34.873 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:09:34.974 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:09:34.974 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:09:35.069 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:09:35.163 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:09:35.442 [http-nio-8080-exec-2] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:09:35.538 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:09:35.643 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:09:35.764 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:09:36.580 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:09:36.680 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:09:36.788 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:09:37.073 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:09:37.074 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:09:38.784 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:09:38.789 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:38.791 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:09:38.793 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:09:38.796 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:09:38.811 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:09:39.002 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:09:39.103 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:09:39.279 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:09:39.284 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:09:39.290 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:09:39.291 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:09:39.319 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:39.319 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:51.343 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/rental/53
02:09:51.348 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:51.350 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/rental/53
02:09:51.364 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:09:51.367 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.rentalPayments(java.lang.Long,org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:09:51.684 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:09:52.103 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
02:09:52.209 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:09:52.307 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:09:52.413 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.rental_id=? 
    order by
        dp1_0.payment_date desc
02:09:52.510 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:09:52.609 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:09:52.870 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:09:52.867 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:09:52.878 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:09:52.880 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:09:52.897 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:09:52.911 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:10:03.316 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/accounts
02:10:03.319 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:10:03.320 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/accounts
02:10:03.601 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0
02:10:03.697 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:03.795 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:03.895 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:03.991 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.086 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.183 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.278 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.373 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.469 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.564 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.658 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.755 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:04.849 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:10:05.297 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:10:05.297 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:10:05.300 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:10:05.300 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:10:05.310 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:10:05.311 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:10:58.145 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
02:10:58.153 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:10:58.155 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
02:10:58.157 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:10:58.162 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:10:58.456 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
02:10:59.005 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
02:10:59.428 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
02:10:59.535 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:10:59.627 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:10:59.922 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:11:00.021 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:11:00.120 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:11:00.518 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
02:11:00.619 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:11:00.716 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:11:00.823 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
02:11:00.969 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:11:00.969 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:11:00.973 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:11:00.973 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:11:00.997 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:11:00.997 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:13:19.287 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
02:13:19.288 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:13:19.288 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.logout.LogoutFilter - Logging out [UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9D9826C5AD53DF3FF1B0AC02A884E55E], Granted Authorities=[ROLE_ADMIN]]]
02:13:19.292 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.l.SecurityContextLogoutHandler - Invalidated session 556135EB3DB766D1DF1065EA1B25E8A9
02:13:19.292 [http-nio-8080-exec-4] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to /auth/login?logout
02:13:19.302 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login?logout
02:13:19.306 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:13:19.306 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login?logout
02:13:19.306 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - Login page requested
02:13:19.306 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - User logged out
02:13:19.333 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:13:19.333 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:13:19.339 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:13:19.339 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:13:19.341 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:13:19.344 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:13:25.399 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
02:13:25.608 [http-nio-8080-exec-2] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin61@example.com
02:13:25.611 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:13:25.707 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:25.805 [http-nio-8080-exec-2] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin61@example.com, роли: [ROLE_USER], enabled: true
02:13:25.808 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
02:13:26.280 [http-nio-8080-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
02:13:26.283 [http-nio-8080-exec-2] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session C828AB339DCFD0C10B3757F195D0F6C0, for principal org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]]
02:13:26.284 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
02:13:26.284 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@6ccb6f12]
02:13:26.285 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]
02:13:26.297 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /
02:13:26.305 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /
02:13:26.327 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.description,
        c1_0.image,
        c1_0.name,
        c1_0.updated_at 
    from
        categories c1_0 
    left join
        rental_items ri1_0 
            on c1_0.id=ri1_0.category_id 
    group by
        c1_0.id 
    order by
        count(ri1_0.id) desc
02:13:26.438 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
    order by
        (select
            count(1) 
        from
            rentals r1_0 
        where
            ri1_0.id=r1_0.item_id) desc
02:13:26.540 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
    order by
        ri1_0.created_at desc
02:13:26.646 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
        and ri1_0.is_promotional=1
02:13:26.758 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        distinct c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    left join
        car_images i1_0 
            on c1_0.id=i1_0.car_id
02:13:27.706 [http-nio-8080-exec-9] DEBUG r.anapa.autorent.service.UserService - Получение списка всех пользователей
02:13:27.897 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0
02:13:27.993 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.090 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.188 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.286 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.383 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.482 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.580 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.675 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.775 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.874 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:28.970 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:29.071 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:29.167 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:29.729 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:13:29.824 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:13:29.921 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:13:30.353 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:30.461 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:13:30.461 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:13:30.470 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /images/car/1750809570975_photo_2025-05-19_21-50-48.jpg
02:13:30.473 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:13:30.476 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:13:30.479 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /images/car/1750809570975_photo_2025-05-19_21-50-48.jpg
02:13:30.495 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:30.498 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0 
    where
        ci1_0.image_url=?
02:13:30.505 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:30.703 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:13:30.814 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:40.373 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /rentals/my-rentals
02:13:40.382 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:40.383 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /rentals/my-rentals
02:13:40.387 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.RentalController.myRentalsPage(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.RentalController]
02:13:40.392 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.RentalController.myRentalsPage(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.RentalController]
02:13:40.395 [http-nio-8080-exec-10] DEBUG r.anapa.autorent.service.UserService - Поиск пользователя по email: admin61@example.com
02:13:40.402 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:13:40.590 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:40.876 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.user_id=? 
    order by
        r1_0.created_at desc
02:13:40.974 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:13:41.069 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:13:41.172 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:13:42.296 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Found 11 rentals for user admin61@example.com
02:13:42.298 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 51, Status: CANCELLED
02:13:42.298 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 50, Status: CANCELLED
02:13:42.298 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 49, Status: CANCELLED
02:13:42.298 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 46, Status: CANCELLED
02:13:42.298 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 47, Status: CANCELLED
02:13:42.298 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 48, Status: COMPLETED
02:13:42.298 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 52, Status: CANCELLED
02:13:42.299 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 53, Status: ACTIVE
02:13:42.299 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 54, Status: ACTIVE
02:13:42.299 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 55, Status: CANCELLED
02:13:42.299 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Rental ID: 56, Status: CANCELLED
02:13:42.300 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Found 0 pending rentals
02:13:42.302 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Found 2 active rentals
02:13:42.303 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Active Rental ID: 53, Status: ACTIVE
02:13:42.304 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Active Rental ID: 54, Status: ACTIVE
02:13:42.306 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - Found 9 history rentals
02:13:42.308 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 51, Status: CANCELLED
02:13:42.309 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 50, Status: CANCELLED
02:13:42.309 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 49, Status: CANCELLED
02:13:42.309 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 46, Status: CANCELLED
02:13:42.310 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 47, Status: CANCELLED
02:13:42.310 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 48, Status: COMPLETED
02:13:42.310 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 52, Status: CANCELLED
02:13:42.310 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 55, Status: CANCELLED
02:13:42.310 [http-nio-8080-exec-10] INFO  r.a.a.controller.RentalController - History Rental ID: 56, Status: CANCELLED
02:13:42.407 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:13:42.501 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:13:42.971 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:13:43.066 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:13:43.169 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.account_id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.type 
    from
        transactions t1_0 
    left join
        accounts a1_0 
            on a1_0.id=t1_0.account_id 
    where
        a1_0.id=? 
    order by
        t1_0.created_at desc
02:13:43.728 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:13:44.107 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        ah1_0.id,
        ah1_0.account_id,
        ah1_0.change_date,
        ah1_0.change_reason,
        ah1_0.changed_by,
        ah1_0.field_name,
        ah1_0.new_value,
        ah1_0.old_value 
    from
        account_history ah1_0 
    where
        ah1_0.account_id=? 
    order by
        ah1_0.change_date desc
02:13:44.204 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:13:44.431 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:13:44.431 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:13:44.431 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /images/car/1750809570975_photo_2025-05-19_21-50-48.jpg
02:13:44.435 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:13:44.436 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:13:44.436 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /images/car/1750809570975_photo_2025-05-19_21-50-48.jpg
02:13:44.450 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0 
    where
        ci1_0.image_url=?
02:13:44.460 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:44.460 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:44.572 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:13:44.680 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:50.976 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/payments
02:13:50.978 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:50.979 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/payments
02:13:50.981 [http-nio-8080-exec-1] DEBUG r.anapa.autorent.service.UserService - Поиск пользователя по email: admin61@example.com
02:13:50.986 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:13:51.175 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:13:51.475 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        distinct r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        car_images i1_0 
            on c1_0.id=i1_0.car_id 
    where
        r1_0.user_id=? 
        and r1_0.status='ACTIVE' 
    order by
        r1_0.created_at desc
02:13:52.641 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:13:53.019 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        distinct dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    left join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    where
        a1_0.user_id=? 
    order by
        dp1_0.payment_date desc
02:13:53.115 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:13:53.218 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:13:53.321 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:13:53.474 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:13:53.475 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:13:53.477 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:13:53.477 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:13:53.482 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:13:53.483 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:18:06.349 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
02:18:06.351 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
02:18:06.801 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
02:18:34.308 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:18:34.380 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 11312 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:18:34.380 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:18:34.380 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:18:35.677 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:18:35.809 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 120 ms. Found 15 JPA repository interfaces.
02:18:36.949 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:18:36.964 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:18:36.968 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:18:36.968 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:18:37.047 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:18:37.048 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2613 ms
02:18:37.413 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:18:37.569 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:18:37.655 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:18:37.709 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:18:38.016 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:18:38.055 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:18:39.714 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7df5549e
02:18:39.718 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:18:41.128 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:18:44.979 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:18:45.456 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:18:46.322 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:18:46.323 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:18:46.616 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:18:46.758 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:18:46.801 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:18:47.422 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:18:47.524 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1ac28535, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@156c2fa2, org.springframework.security.web.context.SecurityContextHolderFilter@576f9ac6, org.springframework.security.web.header.HeaderWriterFilter@65a61862, org.springframework.web.filter.CorsFilter@778e928c, org.springframework.security.web.csrf.CsrfFilter@44084477, org.springframework.security.web.authentication.logout.LogoutFilter@3a76d39, ru.anapa.autorent.config.JwtRequestFilter@29147c12, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@66f44bef, org.springframework.security.web.session.ConcurrentSessionFilter@70a1e4f7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4090f46c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6e1702e0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@57f57af5, org.springframework.security.web.session.SessionManagementFilter@742ff968, org.springframework.security.web.access.ExceptionTranslationFilter@11cee3bc, org.springframework.security.web.access.intercept.AuthorizationFilter@584c62b]
02:18:47.970 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:18:47.984 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:18:47.999 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 14.08 seconds (process running for 14.62)
02:18:48.208 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:18:48.263 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:18:48.333 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:18:48.364 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:18:48.473 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:18:48.590 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:18:48.689 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:18:48.701 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:18:48.737 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:18:48.786 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:18:48.832 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:18:48.926 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:18:49.017 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:18:49.113 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:18:49.205 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:18:49.307 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:18:49.399 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:18:49.672 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:18:49.673 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:18:49.674 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:18:49.855 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:18:50.403 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:18:51.132 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:18:51.673 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:18:53.187 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:18:53.577 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:18:53.578 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:18:53.578 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:18:53.578 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:18:53.578 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:18:53.579 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:18:53.579 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:18:53.579 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:18:53.581 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:18:53.584 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:18:53.687 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:18:53.788 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:18:53.894 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:18:53.994 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:18:54.096 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:18:54.201 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:18:54.202 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:18:54.294 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:18:54.385 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:18:54.662 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:18:54.764 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:18:54.861 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:18:54.955 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:18:56.643 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:18:56.735 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:18:56.852 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:18:57.126 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:18:57.126 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:19:07.413 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:19:07.413 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:19:07.415 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
02:19:07.433 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /
02:19:07.447 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /
02:19:07.461 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.description,
        c1_0.image,
        c1_0.name,
        c1_0.updated_at 
    from
        categories c1_0 
    left join
        rental_items ri1_0 
            on c1_0.id=ri1_0.category_id 
    group by
        c1_0.id 
    order by
        count(ri1_0.id) desc
02:19:07.764 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
    order by
        (select
            count(1) 
        from
            rentals r1_0 
        where
            ri1_0.id=r1_0.item_id) desc
02:19:07.886 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
    order by
        ri1_0.created_at desc
02:19:08.064 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
        and ri1_0.is_promotional=1
02:19:08.171 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        distinct c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    left join
        car_images i1_0 
            on c1_0.id=i1_0.car_id
02:19:08.889 [http-nio-8080-exec-1] DEBUG r.anapa.autorent.service.UserService - Получение списка всех пользователей
02:19:09.081 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0
02:19:09.176 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:09.276 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:09.374 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:09.470 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:09.570 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:09.667 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:09.765 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:09.862 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:09.963 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:10.061 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:10.161 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:10.258 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:10.356 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:10.925 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:19:11.022 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:11.120 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:12.455 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:19:12.636 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:12.636 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:12.642 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:12.643 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:12.645 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /images/car/1750809570975_photo_2025-05-19_21-50-48.jpg
02:19:12.647 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /images/car/1750809570975_photo_2025-05-19_21-50-48.jpg
02:19:12.670 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0 
    where
        ci1_0.image_url=?
02:19:12.682 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:19:12.683 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:19:13.063 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:13.182 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:19:16.604 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
02:19:16.626 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:19:16.629 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.logout.LogoutFilter - Logging out [UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin61@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_USER]]]
02:19:16.637 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.l.SecurityContextLogoutHandler - Invalidated session C828AB339DCFD0C10B3757F195D0F6C0
02:19:16.640 [http-nio-8080-exec-5] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to /auth/login?logout
02:19:16.664 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login?logout
02:19:16.669 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:19:16.678 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login?logout
02:19:16.741 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - Login page requested
02:19:16.741 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - User logged out
02:19:16.838 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:16.838 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:16.843 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:19:16.843 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:19:16.845 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:16.845 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:23.567 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
02:19:23.907 [http-nio-8080-exec-9] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
02:19:23.911 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:19:24.009 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:24.110 [http-nio-8080-exec-9] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
02:19:24.113 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
02:19:24.513 [http-nio-8080-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
02:19:24.594 [http-nio-8080-exec-9] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session ADC3E4550F7C5D3019FD9043BF146523, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
02:19:24.598 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
02:19:24.599 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@38acfb7]
02:19:24.599 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
02:19:24.612 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
02:19:24.616 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:24.620 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
02:19:24.623 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:19:24.629 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:19:24.821 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
02:19:25.389 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
02:19:25.775 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
02:19:25.875 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:19:25.975 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:19:26.261 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:19:26.366 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:26.464 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:26.861 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
02:19:26.959 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:27.056 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:27.159 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
02:19:27.314 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:27.314 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:27.318 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:27.319 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:27.329 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:27.330 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:31.645 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/rentals
02:19:31.647 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:31.648 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/rentals
02:19:31.651 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminRentalController.listRentals(org.springframework.ui.Model,int,int,java.lang.String,java.lang.String); target is of class [ru.anapa.autorent.controller.AdminRentalController]
02:19:31.653 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminRentalController.listRentals(org.springframework.ui.Model,int,int,java.lang.String,java.lang.String); target is of class [ru.anapa.autorent.controller.AdminRentalController]
02:19:31.952 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.id desc 
    limit
        ?, ?
02:19:32.052 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:32.151 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:32.261 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0
02:19:32.714 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:32.714 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:32.716 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:32.716 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:32.722 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:32.724 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:34.645 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/accounts
02:19:34.650 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:34.657 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/accounts
02:19:34.945 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0
02:19:35.043 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.141 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.237 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.337 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.438 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.537 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.635 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.734 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.835 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:35.932 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:36.032 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:36.132 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:36.234 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:36.676 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:36.676 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:36.681 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:36.681 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:36.690 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:36.690 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:40.075 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:19:40.079 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:40.079 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:19:40.085 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:19:40.089 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:19:40.093 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:19:40.283 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:40.379 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:40.527 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:40.530 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:40.534 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:40.535 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:40.551 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:40.553 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:42.608 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/cars
02:19:42.614 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:42.615 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/cars
02:19:42.618 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.web.servlet.ModelAndView ru.anapa.autorent.controller.AdminController.adminCars(); target is of class [ru.anapa.autorent.controller.AdminController]
02:19:42.619 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.web.servlet.ModelAndView ru.anapa.autorent.controller.AdminController.adminCars(); target is of class [ru.anapa.autorent.controller.AdminController]
02:19:42.906 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    limit
        ?, ?
02:19:43.006 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0 
    left join
        cars c1_0 
            on c1_0.id=ci1_0.car_id 
    where
        c1_0.id in (?) 
    order by
        ci1_0.display_order
02:19:44.070 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:44.071 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:44.072 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:44.074 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:44.078 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:44.081 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:44.096 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /images/car/1750809570975_photo_2025-05-19_21-50-48.jpg
02:19:44.098 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /images/car/1750809570975_photo_2025-05-19_21-50-48.jpg
02:19:44.103 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0 
    where
        ci1_0.image_url=?
02:19:44.626 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:44.731 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:46.635 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users
02:19:46.636 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:46.636 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users
02:19:46.637 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.listUsers(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:19:46.638 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.listUsers(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:19:46.639 [http-nio-8080-exec-7] DEBUG r.anapa.autorent.service.UserService - Получение списка всех пользователей
02:19:46.922 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0
02:19:47.017 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.116 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.212 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.312 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.410 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.509 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.607 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.708 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.805 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:47.904 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:48.001 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:48.103 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:48.201 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:19:48.632 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:48.636 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:48.640 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:48.645 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:48.659 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:48.674 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:52.182 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:19:52.183 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:52.185 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:19:52.186 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:19:52.187 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:19:52.192 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:19:52.380 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:52.478 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:52.600 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:19:52.600 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:19:52.601 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:19:52.601 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:19:52.611 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:52.612 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:55.456 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:19:55.458 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:55.459 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
02:19:55.463 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:19:55.469 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:19:55.469 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:19:55.475 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:19:55.665 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:19:55.767 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:19:55.873 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:19:55.970 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:19:56.067 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:19:56.165 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:19:56.165 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:19:56.263 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:19:56.361 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:19:56.646 [http-nio-8080-exec-4] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:19:56.740 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:19:56.838 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:19:56.939 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:19:57.571 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:19:57.668 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:19:57.770 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:19:58.056 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:19:58.058 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:19:59.614 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:19:59.617 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:19:59.618 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:19:59.622 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:19:59.624 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:19:59.630 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:19:59.819 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:19:59.916 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:20:00.064 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:20:00.067 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:20:00.074 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:20:00.073 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:20:00.088 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:20:00.091 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:20:25.660 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:20:25.661 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:20:25.662 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
02:20:25.662 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:20:25.662 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:20:25.663 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:20:25.664 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:20:25.859 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:20:25.955 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:20:26.054 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:20:26.150 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:20:26.246 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:20:26.344 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:20:26.344 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:20:26.442 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:20:26.539 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:20:26.824 [http-nio-8080-exec-8] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:20:26.922 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:20:27.020 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:20:27.123 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:20:27.751 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:20:27.852 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:20:27.955 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:20:28.251 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:20:28.251 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:20:29.783 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:20:29.784 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:20:29.786 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:20:29.787 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:20:29.788 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:20:29.792 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:20:29.986 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:20:30.088 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:20:30.210 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:20:30.210 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:20:30.212 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:20:30.212 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:20:30.218 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:20:30.218 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:24:56.412 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
02:24:56.417 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
02:24:56.780 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:24:56.851 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 3852 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:24:56.851 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:24:56.851 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:24:56.878 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
02:24:57.687 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:24:57.829 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 136 ms. Found 15 JPA repository interfaces.
02:24:58.704 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:24:58.713 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:24:58.715 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:24:58.716 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:24:58.781 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:24:58.781 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1879 ms
02:24:58.974 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:24:59.110 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:24:59.141 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:24:59.167 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:24:59.364 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:24:59.391 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:25:01.062 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5265a8dd
02:25:01.064 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:25:02.282 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:25:06.082 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:25:06.388 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:25:07.034 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:25:07.034 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:25:07.283 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:25:07.403 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:25:07.422 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:25:07.785 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:25:07.887 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5926f473, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7f151342, org.springframework.security.web.context.SecurityContextHolderFilter@1019657, org.springframework.security.web.header.HeaderWriterFilter@189f0c19, org.springframework.web.filter.CorsFilter@70176150, org.springframework.security.web.csrf.CsrfFilter@1923037, org.springframework.security.web.authentication.logout.LogoutFilter@18087347, ru.anapa.autorent.config.JwtRequestFilter@2d6a0766, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@365ebc58, org.springframework.security.web.session.ConcurrentSessionFilter@459a99c9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@23ed88c9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@27b6b0de, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1e2ec5db, org.springframework.security.web.session.SessionManagementFilter@3a307749, org.springframework.security.web.access.ExceptionTranslationFilter@7de9f662, org.springframework.security.web.access.intercept.AuthorizationFilter@cdbac7f]
02:25:08.182 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:25:08.196 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:25:08.212 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 11.702 seconds (process running for 12.195)
02:25:08.415 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:25:08.491 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:25:08.491 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:25:08.604 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:25:08.604 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:25:08.719 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:25:08.722 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:25:08.844 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:25:08.844 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:25:08.942 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:25:08.943 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:25:09.042 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:25:09.233 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:25:09.434 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:25:09.809 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:25:09.839 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:25:09.946 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:25:10.051 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:25:10.052 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:25:10.053 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:25:10.245 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:25:10.823 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:25:11.585 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:25:12.165 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:25:13.764 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:25:14.158 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:25:14.158 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:25:14.158 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:25:14.158 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:25:14.158 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:25:14.158 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:25:14.158 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:25:14.158 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:25:14.158 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:25:14.171 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:25:14.267 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:25:14.373 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:25:14.479 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:25:14.577 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:25:14.675 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:25:14.774 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:25:14.775 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:25:14.871 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:25:14.968 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:25:15.256 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:25:15.354 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:25:15.459 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:25:15.561 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:25:17.610 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:25:17.699 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:25:17.815 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:25:18.122 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:25:18.122 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:26:09.542 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:26:09.542 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:26:09.542 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
02:26:09.560 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:26:09.588 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:26:09.588 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id ADC3E4550F7C5D3019FD9043BF146523
02:26:09.588 [http-nio-8080-exec-1] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:26:09.606 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:26:09.606 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:26:09.606 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id ADC3E4550F7C5D3019FD9043BF146523
02:26:09.612 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:26:09.641 [http-nio-8080-exec-3] INFO  r.a.a.controller.AuthController - Login page requested
02:26:11.849 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:26:11.860 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:26:11.860 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id ADC3E4550F7C5D3019FD9043BF146523
02:26:11.860 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:26:11.860 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Login page requested
02:26:11.907 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:26:11.907 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:26:11.910 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:26:11.910 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:26:11.910 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id ADC3E4550F7C5D3019FD9043BF146523
02:26:11.910 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id ADC3E4550F7C5D3019FD9043BF146523
02:26:11.913 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:26:11.914 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:26:16.801 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
02:26:17.167 [http-nio-8080-exec-6] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
02:26:17.171 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:26:17.267 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:26:17.371 [http-nio-8080-exec-6] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
02:26:17.376 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
02:26:17.796 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
02:26:17.863 [http-nio-8080-exec-6] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session 2CF8D5B971A0EB623A41C74C7885A70D, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
02:26:17.867 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
02:26:17.869 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@65ea7aad]
02:26:17.870 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]
02:26:17.885 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
02:26:17.889 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:17.893 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
02:26:17.896 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:26:17.921 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:26:18.115 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
02:26:18.683 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
02:26:19.082 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
02:26:19.183 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:26:19.284 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:26:19.573 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:26:19.673 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:26:19.773 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:26:20.170 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
02:26:20.269 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:26:20.369 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:26:20.532 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
02:26:20.726 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:26:20.726 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:26:20.729 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:26:20.732 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:26:20.735 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:20.748 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:23.644 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:26:23.647 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:23.649 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:26:23.653 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:26:23.656 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:26:23.668 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:26:23.865 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:26:23.968 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:26:24.122 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:26:24.123 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:26:24.126 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:26:24.126 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:26:24.136 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:24.142 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:25.850 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:26:25.854 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:25.856 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
02:26:25.861 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:26:25.866 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:26:25.868 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:26:25.879 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:26:26.075 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:26:26.178 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:26:26.286 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:26:26.383 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:26:26.486 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:26:26.589 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:26:26.590 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:26:26.689 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:26:26.788 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:26:27.073 [http-nio-8080-exec-2] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:26:27.168 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:26:27.273 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:26:27.382 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:26:28.080 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:26:28.178 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:26:28.281 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:26:28.700 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:26:28.704 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:26:30.298 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:26:30.304 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:30.307 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:26:30.310 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:26:30.313 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:26:30.320 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:26:30.512 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:26:30.612 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:26:30.746 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:26:30.746 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:26:30.749 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:26:30.751 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:26:30.760 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:26:30.766 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
02:29:03.929 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:29:03.986 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 3432 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:29:03.987 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:29:03.989 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:29:04.900 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:29:04.993 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 89 ms. Found 15 JPA repository interfaces.
02:29:05.960 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:29:05.970 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:29:05.973 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:29:05.974 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:29:06.073 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:29:06.073 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2028 ms
02:29:06.291 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:29:06.395 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:29:06.437 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:29:06.456 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:29:06.619 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:29:06.640 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:29:08.109 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@40d370fa
02:29:08.109 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:29:09.407 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:29:13.005 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:29:13.293 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:29:13.951 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:29:13.951 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:29:14.190 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:29:14.308 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:29:14.336 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:29:14.722 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:29:14.814 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@229ba246, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@638a98d7, org.springframework.security.web.context.SecurityContextHolderFilter@70f15b, org.springframework.security.web.header.HeaderWriterFilter@40f5b4ad, org.springframework.web.filter.CorsFilter@6259e660, org.springframework.security.web.csrf.CsrfFilter@75c2baff, org.springframework.security.web.authentication.logout.LogoutFilter@7f151342, ru.anapa.autorent.config.JwtRequestFilter@5a39e554, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7f61a589, org.springframework.security.web.session.ConcurrentSessionFilter@7d7b5971, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4d456d2b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@30020ae3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@47f20fa, org.springframework.security.web.session.SessionManagementFilter@c20fbe0, org.springframework.security.web.access.ExceptionTranslationFilter@11d0a25e, org.springframework.security.web.access.intercept.AuthorizationFilter@5ec47e1c]
02:29:15.109 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:29:15.125 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
02:29:15.125 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
02:29:15.131 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
02:29:18.032 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
02:29:18.070 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
02:29:18.092 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

02:30:50.137 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:30:50.195 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 20896 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:30:50.205 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:30:50.207 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:30:51.137 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:30:51.226 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 15 JPA repository interfaces.
02:30:52.013 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:30:52.020 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:30:52.020 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:30:52.020 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:30:52.092 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:30:52.092 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1805 ms
02:30:52.259 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:30:52.370 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:30:52.426 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:30:52.455 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:30:52.625 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:30:52.655 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:30:54.175 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@34626d4
02:30:54.178 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:30:55.478 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:30:59.079 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:30:59.442 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:31:00.272 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:31:00.272 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:31:00.576 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:31:00.698 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:31:00.744 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:31:01.203 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:31:01.298 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7d7337d0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@fcc981a, org.springframework.security.web.context.SecurityContextHolderFilter@6e4ef465, org.springframework.security.web.header.HeaderWriterFilter@3a00c9af, org.springframework.web.filter.CorsFilter@4da18e2c, org.springframework.security.web.csrf.CsrfFilter@3a307749, org.springframework.security.web.authentication.logout.LogoutFilter@2b8598a2, ru.anapa.autorent.config.JwtRequestFilter@4f8659d0, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3ee86eb7, org.springframework.security.web.session.ConcurrentSessionFilter@3ae31a0f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@cfe4244, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@342a3fad, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@229ba246, org.springframework.security.web.session.SessionManagementFilter@54a32e35, org.springframework.security.web.access.ExceptionTranslationFilter@727d612a, org.springframework.security.web.access.intercept.AuthorizationFilter@4d828783]
02:31:01.719 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:31:01.736 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:31:01.750 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 11.895 seconds (process running for 12.346)
02:31:01.946 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:31:02.043 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:31:02.043 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:31:02.152 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:31:02.152 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:31:02.256 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:31:02.266 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:31:02.384 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:31:02.384 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:31:02.466 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:31:02.466 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:31:02.570 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:31:02.754 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:31:02.941 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:31:03.292 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:31:03.318 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:31:03.425 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:31:03.517 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:31:03.517 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:31:03.517 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:31:03.700 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:31:04.229 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:31:04.964 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:31:05.495 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:31:07.245 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:31:07.628 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:31:07.642 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:31:07.643 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:31:07.645 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:31:07.649 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:31:07.649 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:31:07.651 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:31:07.653 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:31:07.655 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:31:07.659 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:31:07.766 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:31:07.868 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:31:07.986 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:31:08.086 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:31:08.187 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:31:08.297 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:31:08.297 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:31:08.390 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:31:08.483 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:31:08.759 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:31:08.865 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:31:08.964 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:31:09.074 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:31:11.309 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:31:11.395 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:31:11.516 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:31:11.791 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:31:11.796 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:31:26.512 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:31:26.513 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:31:26.519 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
02:31:26.543 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:31:26.562 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:26.625 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments?continue to session
02:31:26.631 [http-nio-8080-exec-1] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:31:26.637 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:31:26.649 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:26.656 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:31:26.688 [http-nio-8080-exec-3] INFO  r.a.a.controller.AuthController - Login page requested
02:31:26.944 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:31:26.946 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:26.947 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:31:27.111 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:31:27.113 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:27.115 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:31:27.660 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /favicon.ico
02:31:27.661 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:27.663 [http-nio-8080-exec-6] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:31:27.858 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:31:27.864 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:27.865 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:31:27.866 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Login page requested
02:31:38.985 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:31:38.985 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:38.985 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2CF8D5B971A0EB623A41C74C7885A70D
02:31:38.985 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments?continue to session
02:31:38.985 [http-nio-8080-exec-7] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:31:38.994 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:31:38.994 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:39.000 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:31:39.002 [http-nio-8080-exec-8] INFO  r.a.a.controller.AuthController - Login page requested
02:31:39.033 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:31:39.033 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:31:39.035 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:39.037 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:31:39.037 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:31:39.039 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:31:41.377 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
02:31:41.631 [http-nio-8080-exec-1] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
02:31:41.634 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:31:41.728 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:31:41.828 [http-nio-8080-exec-1] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
02:31:41.832 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
02:31:42.169 [http-nio-8080-exec-1] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
02:31:42.171 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.s.ChangeSessionIdAuthenticationStrategy - Changed session id from 91924E63A014B102DD045D7CC5628412
02:31:42.172 [http-nio-8080-exec-1] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session 406B2A0A4E00FFD9181E886706DE2924, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
02:31:42.173 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
02:31:42.173 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@1a4c8791]
02:31:42.175 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]
02:31:42.179 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
02:31:42.182 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:42.183 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
02:31:42.185 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:31:42.196 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:31:42.373 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
02:31:42.900 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
02:31:43.292 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
02:31:43.383 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:31:43.474 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:31:43.739 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:31:43.830 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:31:43.924 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:31:44.287 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
02:31:44.380 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:31:44.469 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:31:44.566 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
02:31:44.711 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:31:44.712 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:31:44.714 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:31:44.714 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:31:44.717 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:44.717 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:46.484 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:31:46.486 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:46.487 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:31:46.488 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:31:46.489 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:31:46.491 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:31:46.668 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:31:46.759 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:31:46.884 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:31:46.885 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:31:46.887 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:31:46.889 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:31:46.890 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:46.900 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:48.882 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:31:48.885 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:48.887 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
02:31:48.888 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:31:48.888 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:31:48.890 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:31:48.892 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:31:49.067 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:31:49.158 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:31:49.257 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:31:49.344 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:31:49.434 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:31:49.529 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:31:49.531 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:31:49.619 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:31:49.707 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:31:49.972 [http-nio-8080-exec-8] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:31:50.062 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:31:50.156 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:31:50.257 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:31:50.922 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:31:51.013 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:31:51.110 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:31:51.370 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:31:51.370 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:31:52.912 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:31:52.914 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:52.916 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:31:52.917 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:31:52.918 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:31:52.920 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:31:53.096 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:31:53.190 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:31:53.296 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:31:53.296 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:31:53.298 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:31:53.298 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:31:53.304 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:31:53.304 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=91924E63A014B102DD045D7CC5628412], Granted Authorities=[ROLE_ADMIN]]]
02:36:05.331 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:36:05.389 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 18264 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:36:05.389 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:36:05.389 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:36:06.461 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:36:06.663 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 182 ms. Found 15 JPA repository interfaces.
02:36:07.526 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:36:07.542 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:36:07.542 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:36:07.542 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:36:07.621 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:36:07.623 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2182 ms
02:36:07.804 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:36:07.907 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:36:07.955 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:36:07.988 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:36:08.150 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:36:08.186 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:36:09.823 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@66fff42f
02:36:09.825 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:36:11.158 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:36:15.099 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:36:15.448 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:36:16.298 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:36:16.298 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:36:16.608 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:36:16.747 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:36:16.788 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:36:17.302 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:36:17.397 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@765c5a23, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@27d60d31, org.springframework.security.web.context.SecurityContextHolderFilter@70867b70, org.springframework.security.web.header.HeaderWriterFilter@3d67e1b7, org.springframework.web.filter.CorsFilter@7a35e3a, org.springframework.security.web.csrf.CsrfFilter@6f4ded72, org.springframework.security.web.authentication.logout.LogoutFilter@40f5b4ad, ru.anapa.autorent.config.JwtRequestFilter@1d3d76b4, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@72eca02d, org.springframework.security.web.session.ConcurrentSessionFilter@3500ab03, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1cde05bc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@459a99c9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@12e3b398, org.springframework.security.web.session.SessionManagementFilter@4feead88, org.springframework.security.web.access.ExceptionTranslationFilter@15a493c8, org.springframework.security.web.access.intercept.AuthorizationFilter@150a615c]
02:36:17.817 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:36:17.823 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:36:17.849 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 12.77 seconds (process running for 13.13)
02:36:18.048 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:36:18.144 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:36:18.145 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:36:18.262 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:36:18.262 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:36:18.363 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:36:18.387 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:36:18.481 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:36:18.493 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:36:18.564 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:36:18.599 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:36:18.701 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:36:18.855 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:36:19.042 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:36:19.398 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:36:19.418 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:36:19.514 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:36:19.619 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:36:19.619 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:36:19.619 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:36:19.796 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:36:20.334 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:36:21.062 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:36:21.599 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:36:23.072 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:36:23.456 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:36:23.462 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:36:23.462 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:36:23.462 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:36:23.462 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:36:23.462 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:36:23.462 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:36:23.470 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:36:23.470 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:36:23.475 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:36:23.582 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:36:23.685 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:36:23.786 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:36:23.893 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:36:24.006 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:36:24.122 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:36:24.123 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:36:24.232 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:36:24.325 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:36:24.596 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:36:24.691 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:36:24.794 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:36:24.892 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:36:26.380 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:36:26.480 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:36:26.601 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:36:26.914 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:36:26.914 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:36:30.744 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:36:30.748 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:36:30.750 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
02:36:30.766 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/diagnose-get
02:36:30.782 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:36:30.828 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments/diagnose-get?continue to session
02:36:30.838 [http-nio-8080-exec-1] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:36:30.850 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:36:30.852 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:36:30.855 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:36:30.880 [http-nio-8080-exec-2] INFO  r.a.a.controller.AuthController - Login page requested
02:39:33.506 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:39:33.512 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:39:33.512 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 406B2A0A4E00FFD9181E886706DE2924
02:39:33.512 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments?continue to session
02:39:33.512 [http-nio-8080-exec-4] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:39:33.527 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:39:33.527 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:39:33.530 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:39:33.530 [http-nio-8080-exec-5] INFO  r.a.a.controller.AuthController - Login page requested
02:39:33.561 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:39:33.564 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:39:33.564 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:39:33.566 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:39:33.566 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:39:33.569 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:39:35.581 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
02:39:35.936 [http-nio-8080-exec-8] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
02:39:35.942 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:39:36.041 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:39:36.148 [http-nio-8080-exec-8] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
02:39:36.153 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
02:39:36.579 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
02:39:36.584 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.s.ChangeSessionIdAuthenticationStrategy - Changed session id from 534E68599674A3FA4A24AC66B6162FD4
02:39:36.588 [http-nio-8080-exec-8] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session 775E11AFDB6E429F878EA747266C1299, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
02:39:36.591 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
02:39:36.596 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@1b42e22e]
02:39:36.599 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]
02:39:36.616 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
02:39:36.621 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:36.624 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
02:39:36.631 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:39:36.656 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
02:39:36.856 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
02:39:37.427 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
02:39:37.829 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
02:39:37.930 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:39:38.029 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:39:38.324 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
02:39:38.425 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:39:38.526 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:39:38.936 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
02:39:39.036 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:39:39.134 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:39:39.246 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
02:39:39.441 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:39:39.443 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:39:39.449 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:39:39.448 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:39:39.457 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:39.458 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:42.659 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:39:42.662 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:42.663 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:39:42.669 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:39:42.673 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:39:42.678 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:39:42.872 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:39:42.971 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:39:43.124 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:39:43.124 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:39:43.127 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:39:43.127 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:39:43.134 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:43.134 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:46.698 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:39:46.702 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:46.703 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
02:39:46.708 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:39:46.711 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:39:46.713 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:39:46.724 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:39:46.919 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:39:47.018 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:39:47.124 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:39:47.223 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:39:47.327 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:39:47.436 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:39:47.437 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:39:47.533 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:39:47.634 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:39:47.926 [http-nio-8080-exec-5] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:39:48.026 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:39:48.138 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:39:48.245 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:39:49.001 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:39:49.099 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:39:49.203 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:39:49.491 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:39:49.493 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:39:51.069 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
02:39:51.072 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:51.073 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
02:39:51.074 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:39:51.075 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:39:51.081 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
02:39:51.277 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:39:51.383 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:39:51.516 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
02:39:51.517 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
02:39:51.522 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
02:39:51.522 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
02:39:51.536 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:39:51.538 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:40:07.157 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/diagnose
02:40:07.159 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=534E68599674A3FA4A24AC66B6162FD4], Granted Authorities=[ROLE_ADMIN]]]
02:40:07.159 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/diagnose
02:40:07.160 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.diagnoseAllPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:40:07.161 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.diagnoseAllPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:40:07.161 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - === ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
02:40:07.447 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
02:40:07.550 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:40:07.651 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:40:07.754 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:40:08.136 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
02:40:08.139 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
02:40:08.139 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
02:40:08.140 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
02:40:08.140 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
02:40:08.141 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
02:40:08.141 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Детали платежей с превышением кредитного лимита:
02:40:08.142 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
02:40:08.142 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, примечания=Техническая ошибка: Credit limit exceeded
02:40:08.143 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
02:42:30.296 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
02:42:30.296 [http-nio-8080-exec-3] DEBUG o.s.security.web.csrf.CsrfFilter - Invalid CSRF token found for http://localhost:8080/admin/payments/process-all
02:42:30.296 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:42:30.296 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:42:30.296 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:42:30.296 [http-nio-8080-exec-4] INFO  r.a.a.controller.AuthController - Login page requested
02:42:30.296 [http-nio-8080-exec-4] INFO  r.a.a.controller.AuthController - Admin login required message detected in session
02:43:21.421 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:43:21.532 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 2364 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:43:21.534 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:43:21.536 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:43:22.552 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:43:22.644 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 15 JPA repository interfaces.
02:43:23.482 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:43:23.482 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:43:23.498 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:43:23.498 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:43:23.565 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:43:23.565 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1960 ms
02:43:23.746 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:43:23.863 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:43:23.908 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:43:23.925 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:43:24.187 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:43:24.215 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:43:25.734 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5535e9
02:43:25.750 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:43:27.140 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:43:31.044 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:43:31.391 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:43:32.279 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:43:32.279 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:43:32.586 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:43:32.724 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:43:32.756 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:43:33.242 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:43:33.337 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@207d4b53, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@56f422e9, org.springframework.security.web.context.SecurityContextHolderFilter@607a68fd, org.springframework.security.web.header.HeaderWriterFilter@459a99c9, org.springframework.web.filter.CorsFilter@76d40e8e, org.springframework.security.web.csrf.CsrfFilter@3c1569b2, org.springframework.security.web.authentication.logout.LogoutFilter@30020ae3, ru.anapa.autorent.config.JwtRequestFilter@31c7c281, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1fc5aaa5, org.springframework.security.web.session.ConcurrentSessionFilter@23ed88c9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6f211822, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@11cb863b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4d828783, org.springframework.security.web.session.SessionManagementFilter@374baba3, org.springframework.security.web.access.ExceptionTranslationFilter@5f40a8df, org.springframework.security.web.access.intercept.AuthorizationFilter@49f640a4]
02:43:33.759 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:43:33.765 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
02:43:33.771 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
02:43:33.775 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
02:43:34.323 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
02:43:34.348 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
02:43:34.359 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

02:43:36.147 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/process-all-get
02:43:36.148 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:43:36.151 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/payments/process-all-get?continue to session
02:43:36.152 [http-nio-8080-exec-6] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
02:43:36.157 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
02:43:36.157 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:43:36.157 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
02:43:36.157 [http-nio-8080-exec-7] INFO  r.a.a.controller.AuthController - Login page requested
02:44:08.164 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:44:08.220 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 20728 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:44:08.220 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:44:08.220 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:44:09.164 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:44:09.250 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 87 ms. Found 15 JPA repository interfaces.
02:44:10.046 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:44:10.063 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:44:10.063 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:44:10.063 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:44:10.134 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:44:10.134 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1853 ms
02:44:10.296 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:44:10.415 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:44:10.467 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:44:10.482 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:44:10.663 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:44:10.679 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:44:12.314 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@178c6261
02:44:12.320 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:44:13.696 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:44:17.563 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:44:17.893 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:44:18.747 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:44:18.756 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:44:19.041 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:44:19.175 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:44:19.211 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:44:19.674 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:44:19.794 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5e612795, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5926f473, org.springframework.security.web.context.SecurityContextHolderFilter@7de9b985, org.springframework.security.web.header.HeaderWriterFilter@2a77a5d3, org.springframework.web.filter.CorsFilter@7f151342, org.springframework.security.web.csrf.CsrfFilter@1641ee27, org.springframework.security.web.authentication.logout.LogoutFilter@25f475a6, ru.anapa.autorent.config.JwtRequestFilter@22ca1242, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5af50d9b, org.springframework.security.web.session.ConcurrentSessionFilter@1fc6ccbe, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2e53107a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@11d0a25e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@49f640a4, org.springframework.security.web.session.SessionManagementFilter@5a2f57d1, org.springframework.security.web.access.ExceptionTranslationFilter@124c77bd, org.springframework.security.web.access.intercept.AuthorizationFilter@f2c6d70]
02:44:20.157 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:44:20.174 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:44:20.193 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 12.289 seconds (process running for 12.752)
02:44:20.392 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:44:20.525 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:44:20.525 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:44:20.641 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:44:20.641 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:44:20.758 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:44:20.758 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:44:20.887 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:44:20.887 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:44:20.986 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:44:20.992 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:44:21.092 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:44:21.295 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:44:21.494 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:44:21.878 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:44:21.915 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:44:22.018 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:44:22.125 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:44:22.125 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:44:22.125 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:44:22.328 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:44:22.910 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:44:23.678 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:44:24.245 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:44:25.909 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:44:26.288 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:44:26.288 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:44:26.288 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:44:26.302 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:44:26.303 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:44:26.304 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:44:26.304 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:44:26.304 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:44:26.304 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:44:26.304 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:44:26.421 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:44:26.522 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:44:26.657 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:44:26.767 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:44:26.871 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:44:26.989 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:44:26.989 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:44:27.105 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:44:27.221 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:44:27.504 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:44:27.620 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:44:27.736 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:44:27.837 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:44:29.617 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:44:29.714 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:44:29.827 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:44:30.147 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:44:30.148 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:44:31.234 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:44:31.234 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:44:31.251 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
02:44:31.267 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/process-all-get
02:44:31.267 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:44:31.284 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/process-all-get
02:44:31.295 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllPaymentsGet(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:44:31.318 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllPaymentsGet(); target is of class [ru.anapa.autorent.controller.DailyPaymentController] with authorization manager org.springframework.security.config.annotation.method.configuration.DeferringObservationAuthorizationManager@62ca3b3a and decision ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMIN')]
02:44:31.334 [http-nio-8080-exec-1] ERROR r.a.a.config.GlobalExceptionHandler - Unexpected error occurred
org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ru.anapa.autorent.controller.DailyPaymentController$$SpringCGLIB$$0.processAllPaymentsGet(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:151)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:129)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at ru.anapa.autorent.config.JwtRequestFilter.doFilterInternal(JwtRequestFilter.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ru.anapa.autorent.config.JwtRequestFilter$$SpringCGLIB$$0.doFilterInternal(<generated>)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:117)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
02:45:42.120 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:45:42.187 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 4236 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:45:42.187 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:45:42.187 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:45:43.111 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:45:43.210 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 15 JPA repository interfaces.
02:45:44.042 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:45:44.058 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:45:44.058 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:45:44.058 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:45:44.144 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:45:44.144 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1896 ms
02:45:44.313 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:45:44.434 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:45:44.488 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:45:44.524 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:45:44.708 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:45:44.721 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:45:46.264 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@757c685d
02:45:46.264 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:45:47.607 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:45:51.326 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:45:51.802 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:45:52.786 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:45:52.786 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:45:53.103 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:45:53.230 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:45:53.273 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:45:53.755 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:45:53.878 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@207d4b53, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@56f422e9, org.springframework.security.web.context.SecurityContextHolderFilter@607a68fd, org.springframework.security.web.header.HeaderWriterFilter@459a99c9, org.springframework.web.filter.CorsFilter@76d40e8e, org.springframework.security.web.csrf.CsrfFilter@3c1569b2, org.springframework.security.web.authentication.logout.LogoutFilter@30020ae3, ru.anapa.autorent.config.JwtRequestFilter@3c3e363, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1fc5aaa5, org.springframework.security.web.session.ConcurrentSessionFilter@23ed88c9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6f211822, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@11cb863b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4d828783, org.springframework.security.web.session.SessionManagementFilter@374baba3, org.springframework.security.web.access.ExceptionTranslationFilter@5f40a8df, org.springframework.security.web.access.intercept.AuthorizationFilter@49f640a4]
02:45:54.292 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:45:54.304 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:45:54.323 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 12.514 seconds (process running for 13.101)
02:45:54.364 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:45:54.364 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:45:54.525 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:45:54.630 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:45:54.653 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:45:54.729 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:45:54.868 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:45:54.990 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:45:55.089 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:45:55.181 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:45:55.181 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:45:55.889 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:45:56.420 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:45:57.868 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:45:58.213 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:45:58.213 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:45:58.213 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:45:58.213 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:45:58.213 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:45:58.213 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:45:58.213 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:45:58.213 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:45:58.421 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:45:58.812 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:45:58.854 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:45:58.945 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:45:59.043 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:45:59.158 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:45:59.262 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:45:59.368 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:45:59.465 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:45:59.557 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:45:59.832 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:45:59.836 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:45:59.839 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:45:59.929 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:46:00.022 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:46:00.125 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:46:00.213 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:46:00.312 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:46:00.416 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:46:00.417 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:46:00.514 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:46:00.602 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:46:00.869 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:46:00.961 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:46:01.075 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:46:01.176 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:46:02.910 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:46:02.992 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:46:03.112 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:46:03.381 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:46:03.382 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:46:04.644 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:46:04.644 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:46:04.644 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
02:46:04.667 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments/test-process-all
02:46:04.674 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:46:04.693 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments/test-process-all
02:46:04.696 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.testProcessAllPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
02:46:04.743 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.testProcessAllPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController] with authorization manager org.springframework.security.config.annotation.method.configuration.DeferringObservationAuthorizationManager@722b6f83 and decision ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMIN')]
02:46:04.747 [http-nio-8080-exec-1] ERROR r.a.a.config.GlobalExceptionHandler - Unexpected error occurred
org.springframework.security.access.AccessDeniedException: Access Denied
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:256)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ru.anapa.autorent.controller.DailyPaymentController$$SpringCGLIB$$0.testProcessAllPayments(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:151)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:129)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at ru.anapa.autorent.config.JwtRequestFilter.doFilterInternal(JwtRequestFilter.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ru.anapa.autorent.config.JwtRequestFilter$$SpringCGLIB$$0.doFilterInternal(<generated>)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:117)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
02:47:09.835 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:47:09.900 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 6828 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:47:09.900 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:47:09.900 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:47:10.830 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:47:10.929 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 15 JPA repository interfaces.
02:47:11.752 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:47:11.752 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:47:11.752 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:47:11.764 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:47:11.839 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:47:11.839 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1861 ms
02:47:12.037 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:47:12.154 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:47:12.207 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:47:12.255 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:47:12.438 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:47:12.452 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:47:14.138 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3791af
02:47:14.138 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:47:15.503 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:47:19.431 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:47:19.784 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:47:20.657 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:47:20.657 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:47:20.981 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:47:21.143 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:47:21.185 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:47:21.703 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:47:21.816 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@765a09fc, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@648d6010, org.springframework.security.web.context.SecurityContextHolderFilter@258ad0a5, org.springframework.security.web.header.HeaderWriterFilter@3500ab03, org.springframework.web.filter.CorsFilter@5e612795, org.springframework.security.web.csrf.CsrfFilter@6191335f, org.springframework.security.web.authentication.logout.LogoutFilter@7d7b5971, ru.anapa.autorent.config.JwtRequestFilter@274bae2c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@cdbac7f, org.springframework.security.web.session.ConcurrentSessionFilter@1cde05bc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@727d612a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@23ed88c9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@70176150, org.springframework.security.web.session.SessionManagementFilter@2877e4ba, org.springframework.security.web.access.ExceptionTranslationFilter@8781b3f, org.springframework.security.web.access.intercept.AuthorizationFilter@54b8985]
02:47:22.313 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:47:22.317 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:47:22.345 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 12.788 seconds (process running for 13.225)
02:47:22.556 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:47:22.641 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:47:22.666 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:47:22.773 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:47:22.897 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:47:23.032 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:47:23.033 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:47:23.062 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:47:23.126 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:47:23.167 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:47:23.221 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:47:23.264 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:47:23.264 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:47:23.264 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:47:23.435 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:47:23.991 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:47:24.712 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:47:25.259 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:47:27.026 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:47:27.390 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:47:27.390 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:47:27.390 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:47:27.390 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:47:27.402 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:47:27.404 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:47:27.407 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:47:27.410 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:47:27.514 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:47:27.632 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:47:27.734 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:47:27.844 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:47:27.932 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:47:28.258 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:47:28.274 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:47:28.283 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:47:28.388 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:47:28.492 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:47:28.601 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:47:28.689 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:47:28.795 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:47:28.890 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:47:28.890 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:47:28.989 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:47:29.087 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:47:29.365 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:47:29.470 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:47:29.581 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:47:29.680 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:47:31.461 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:47:31.552 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:47:31.667 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:47:31.940 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:47:31.941 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:47:32.760 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:47:32.761 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:47:32.763 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
02:47:32.791 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-payments
02:47:32.805 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:47:32.810 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-payments
02:47:32.826 [http-nio-8080-exec-1] ERROR r.a.a.config.GlobalExceptionHandler - Unexpected error occurred
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource test-payments.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:151)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:129)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at ru.anapa.autorent.config.JwtRequestFilter.doFilterInternal(JwtRequestFilter.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ru.anapa.autorent.config.JwtRequestFilter$$SpringCGLIB$$0.doFilterInternal(<generated>)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:117)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
02:48:42.318 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:48:42.400 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 22240 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:48:42.400 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:48:42.400 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:48:43.349 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:48:43.439 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 15 JPA repository interfaces.
02:48:44.262 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:48:44.271 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:48:44.271 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:48:44.271 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:48:44.357 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:48:44.357 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1883 ms
02:48:44.534 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:48:44.654 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:48:44.706 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:48:44.748 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:48:44.930 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:48:44.963 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:48:46.666 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@308be1a3
02:48:46.674 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:48:48.061 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:48:52.061 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:48:52.531 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:48:53.409 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:48:53.425 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:48:53.739 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:48:53.874 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:48:53.917 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:48:54.439 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:48:54.557 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@55851bc0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5af50d9b, org.springframework.security.web.context.SecurityContextHolderFilter@29058723, org.springframework.security.web.header.HeaderWriterFilter@7fec168e, org.springframework.web.filter.CorsFilter@365ebc58, org.springframework.security.web.csrf.CsrfFilter@2e37e758, org.springframework.security.web.authentication.logout.LogoutFilter@5c2fbeda, ru.anapa.autorent.config.JwtRequestFilter@1d3d76b4, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@765c5a23, org.springframework.security.web.session.ConcurrentSessionFilter@2d751681, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@32720ef6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@258ad0a5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@68fa4599, org.springframework.security.web.session.SessionManagementFilter@173f34d8, org.springframework.security.web.access.ExceptionTranslationFilter@4feead88, org.springframework.security.web.access.intercept.AuthorizationFilter@3f8ddadb]
02:48:54.987 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:48:54.987 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:48:55.021 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 13.085 seconds (process running for 13.664)
02:48:55.226 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:48:55.314 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:48:55.352 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:48:55.436 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:48:55.550 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:48:55.676 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:48:55.726 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:48:55.758 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:48:55.788 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:48:55.844 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:48:55.889 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:48:55.947 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:48:55.947 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:48:55.947 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:48:56.132 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:48:56.695 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:48:57.510 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:48:58.051 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:48:58.905 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:48:59.272 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:48:59.274 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:48:59.275 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:48:59.275 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:48:59.275 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:48:59.275 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:48:59.275 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:48:59.275 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:48:59.381 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:48:59.505 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:48:59.609 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:48:59.730 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:48:59.830 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:49:00.132 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:49:00.150 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:49:00.156 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:49:00.257 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:49:00.351 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:00.448 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:49:00.540 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:49:00.633 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:00.728 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:49:00.729 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:49:00.823 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:49:00.916 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:49:01.190 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:49:01.292 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:49:01.391 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:49:01.489 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:49:01.871 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:49:01.963 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:49:02.078 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:49:02.363 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:49:02.363 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:49:02.847 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:49:02.848 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:49:02.850 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
02:49:02.869 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-payments
02:49:02.885 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:49:02.889 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-payments
02:49:02.896 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:49:02.896 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:49:03.119 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:49:03.229 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:03.334 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:49:03.429 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:49:03.532 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:03.630 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:49:03.639 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:49:03.730 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:49:03.822 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:49:04.108 [http-nio-8080-exec-3] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:49:04.203 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:49:04.309 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:49:04.413 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:49:05.137 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:49:05.234 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:49:05.353 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:49:05.667 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:49:05.667 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:49:19.430 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-diagnose
02:49:19.430 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:49:19.432 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-diagnose
02:49:19.436 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - === ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
02:49:19.722 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
02:49:19.810 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:49:19.917 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:20.025 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:20.405 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
02:49:20.411 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
02:49:20.411 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
02:49:20.411 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
02:49:20.411 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
02:49:20.411 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
02:49:20.416 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Детали платежей с превышением кредитного лимита:
02:49:20.416 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
02:49:20.418 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, примечания=Техническая ошибка: Credit limit exceeded
02:49:20.420 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
02:49:34.962 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-payments
02:49:34.963 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:49:34.964 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-payments
02:49:34.965 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:49:34.966 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:49:35.151 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:49:35.251 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:35.362 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:49:35.460 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:49:35.554 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:35.666 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:49:35.667 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00
02:49:35.761 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:49:35.852 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:49:36.139 [http-nio-8080-exec-10] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:49:36.242 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:49:36.351 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:49:36.462 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:49:37.093 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:49:37.189 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:49:37.301 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:49:37.594 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:49:37.594 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:49:46.505 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-diagnose
02:49:46.506 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:49:46.507 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-diagnose
02:49:46.508 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - === ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
02:49:46.787 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
02:49:46.877 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:49:46.983 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:47.088 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Детали платежей с превышением кредитного лимита:
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, примечания=Техническая ошибка: Credit limit exceeded
02:49:47.459 [http-nio-8080-exec-5] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
02:53:47.279 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
02:53:47.331 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 21200 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
02:53:47.331 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
02:53:47.331 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
02:53:48.022 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
02:53:48.116 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 87 ms. Found 15 JPA repository interfaces.
02:53:48.758 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
02:53:48.759 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
02:53:48.773 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
02:53:48.774 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
02:53:48.832 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
02:53:48.844 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1464 ms
02:53:48.989 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
02:53:49.082 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
02:53:49.113 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
02:53:49.146 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
02:53:49.294 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
02:53:49.314 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
02:53:50.789 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@476a970c
02:53:50.791 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
02:53:51.832 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
02:53:55.417 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
02:53:55.717 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
02:53:56.369 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
02:53:56.369 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
02:53:56.604 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
02:53:56.706 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
02:53:56.745 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
02:53:57.093 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
02:53:57.174 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7f151342, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@70176150, org.springframework.security.web.context.SecurityContextHolderFilter@727d612a, org.springframework.security.web.header.HeaderWriterFilter@2877e4ba, org.springframework.web.filter.CorsFilter@279dbd48, org.springframework.security.web.csrf.CsrfFilter@6971e091, org.springframework.security.web.authentication.logout.LogoutFilter@3f9f11e6, ru.anapa.autorent.config.JwtRequestFilter@333d44f6, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@67b756b8, org.springframework.security.web.session.ConcurrentSessionFilter@29058723, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3a00c9af, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6852cf21, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@55f83aaf, org.springframework.security.web.session.SessionManagementFilter@2d751681, org.springframework.security.web.access.ExceptionTranslationFilter@3500ab03, org.springframework.security.web.access.intercept.AuthorizationFilter@55851bc0]
02:53:57.467 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
02:53:57.486 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
02:53:57.491 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 10.414 seconds (process running for 10.739)
02:53:57.691 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
02:53:57.762 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
02:53:57.762 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:53:57.869 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:53:57.869 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
02:53:57.973 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:53:57.979 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:53:58.093 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
02:53:58.093 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
02:53:58.172 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
02:53:58.187 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:53:58.272 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
02:53:58.468 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
02:53:58.677 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
02:53:59.047 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
02:53:59.084 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
02:53:59.193 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
02:53:59.294 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
02:53:59.294 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
02:53:59.295 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
02:53:59.471 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
02:54:00.052 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:54:00.750 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:54:01.331 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
02:54:03.051 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
02:54:03.460 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
02:54:03.461 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
02:54:03.462 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
02:54:03.462 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
02:54:03.463 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
02:54:03.463 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
02:54:03.464 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
02:54:03.465 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
02:54:03.466 [main] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:54:03.469 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:54:03.569 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:54:03.682 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:54:03.798 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:54:03.902 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:54:04.019 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:54:04.134 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:54:04.134 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
02:54:04.136 [main] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
02:54:04.251 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:54:04.363 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:54:04.466 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:54:06.611 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:54:06.720 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:54:06.851 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:54:07.279 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:54:07.380 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:54:07.660 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:54:07.773 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:54:07.875 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:54:07.985 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:54:09.891 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:54:09.991 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:54:10.094 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:54:10.388 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:54:10.388 [main] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:54:41.511 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
02:54:41.514 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
02:54:41.517 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
02:54:41.527 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-payments
02:54:41.540 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:54:41.540 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-payments
02:54:41.551 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
02:54:41.551 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:54:41.731 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:54:41.818 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:54:41.925 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
02:54:42.013 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:54:42.097 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:54:42.195 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
02:54:42.195 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
02:54:42.195 [http-nio-8080-exec-1] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
02:54:42.280 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:54:42.394 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:54:42.494 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:54:43.145 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:54:43.232 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:54:43.328 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:54:43.695 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
02:54:43.779 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
02:54:44.046 [http-nio-8080-exec-1] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
02:54:44.147 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
02:54:44.245 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
02:54:44.346 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
02:54:45.837 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
02:54:45.930 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
02:54:46.029 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
02:54:46.295 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
02:54:46.299 [http-nio-8080-exec-1] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
02:54:52.235 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-diagnose
02:54:52.239 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
02:54:52.244 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-diagnose
02:54:52.246 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService - === ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
02:54:52.507 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
02:54:52.607 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
02:54:52.690 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:54:52.793 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
02:54:53.156 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService - Детали платежей с превышением кредитного лимита:
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, примечания=Техническая ошибка: Credit limit exceeded
02:54:53.161 [http-nio-8080-exec-6] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
03:00:00.022 [scheduling-1] INFO  r.a.a.service.DailyPaymentService - [Scheduler] Актуализация всех не обработанных платежей (PENDING/FAILED)
03:00:00.024 [scheduling-1] INFO  r.a.a.service.DailyPaymentService - Начинаем актуализацию всех не обработанных платежей
03:00:00.033 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
03:00:00.206 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:00:00.295 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:00:00.401 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status=?
03:00:00.477 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:00:00.581 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:00:00.660 [scheduling-1] INFO  r.a.a.service.DailyPaymentService - Найдено 1 платежей для обработки (PENDING: 2, FAILED: 1)
03:00:00.660 [scheduling-1] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:00:00.660 [scheduling-1] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:00:00.762 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:00:00.855 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:00:00.947 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:00:01.589 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:00:01.681 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:00:01.779 [scheduling-1] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:00:02.128 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:00:02.224 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:00:02.489 [scheduling-1] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:00:02.577 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:00:02.671 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:00:02.763 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:00:04.312 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:00:04.397 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:00:04.494 [scheduling-1] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:00:04.791 [scheduling-1] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан
03:00:04.791 [scheduling-1] INFO  r.a.a.service.DailyPaymentService - Актуализация завершена. Обработано: 1, Ошибок: 0
03:00:04.791 [scheduling-1] INFO  r.a.autorent.config.ScheduledTasks - Запуск синхронизации статусов автомобилей
03:00:04.888 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
03:00:04.994 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
03:00:05.092 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
03:00:05.184 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
03:00:05.283 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:00:05.561 [scheduling-1] INFO  r.a.autorent.config.ScheduledTasks - Синхронизация статусов автомобилей завершена успешно
03:01:04.500 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
03:01:04.554 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 5012 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
03:01:04.554 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
03:01:04.568 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
03:01:05.535 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
03:01:05.639 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92 ms. Found 15 JPA repository interfaces.
03:01:06.422 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
03:01:06.439 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
03:01:06.439 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
03:01:06.439 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
03:01:06.504 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
03:01:06.504 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1877 ms
03:01:06.690 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
03:01:06.802 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
03:01:06.841 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
03:01:06.868 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
03:01:07.059 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
03:01:07.085 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
03:01:08.584 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ce57bbb
03:01:08.584 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
03:01:10.055 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
03:01:13.706 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
03:01:14.069 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
03:01:14.946 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
03:01:14.946 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
03:01:15.300 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
03:01:15.436 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
03:01:15.470 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
03:01:16.001 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
03:01:16.113 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@22772e51, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7467b8ee, org.springframework.security.web.context.SecurityContextHolderFilter@78fb43aa, org.springframework.security.web.header.HeaderWriterFilter@65293200, org.springframework.web.filter.CorsFilter@594e64be, org.springframework.security.web.csrf.CsrfFilter@36f120c, org.springframework.security.web.authentication.logout.LogoutFilter@4e844e9f, ru.anapa.autorent.config.JwtRequestFilter@16c5b50a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@67ee5b15, org.springframework.security.web.session.ConcurrentSessionFilter@7480b7cd, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1f70777b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2fc0df0d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4f06acb7, org.springframework.security.web.session.SessionManagementFilter@59f45a7d, org.springframework.security.web.access.ExceptionTranslationFilter@3eb04c79, org.springframework.security.web.access.intercept.AuthorizationFilter@6559faf1]
03:01:16.539 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
03:01:16.547 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
03:01:16.548 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
03:01:16.548 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
03:01:17.080 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
03:01:17.119 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
03:01:17.133 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

03:01:20.006 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-diagnose
03:01:20.010 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:01:20.012 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-diagnose
03:01:20.014 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - === ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
03:01:20.278 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
03:01:20.368 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:01:20.462 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:01:20.562 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:01:20.910 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
03:01:20.910 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
03:01:20.926 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
03:01:20.926 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
03:01:20.926 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:01:20.926 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
03:01:20.926 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Детали платежей с превышением кредитного лимита:
03:01:20.926 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
03:01:20.926 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, примечания=Техническая ошибка: Credit limit exceeded
03:01:20.926 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
03:01:27.416 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-startup-payments
03:01:27.417 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:01:27.527 [http-nio-8080-exec-8] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/test-startup-payments?continue to session
03:01:27.530 [http-nio-8080-exec-8] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
03:01:27.543 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
03:01:27.545 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:01:27.547 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
03:01:27.567 [http-nio-8080-exec-4] INFO  r.a.a.controller.AuthController - Login page requested
03:02:00.816 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
03:02:00.872 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 11180 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
03:02:00.872 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
03:02:00.872 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
03:02:01.698 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
03:02:01.800 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 103 ms. Found 15 JPA repository interfaces.
03:02:02.685 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
03:02:02.703 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
03:02:02.705 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
03:02:02.705 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
03:02:02.770 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
03:02:02.770 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1844 ms
03:02:02.965 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
03:02:03.083 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
03:02:03.136 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
03:02:03.157 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
03:02:03.334 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
03:02:03.349 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
03:02:04.930 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@62aee901
03:02:04.936 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
03:02:06.218 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
03:02:09.951 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
03:02:10.294 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
03:02:11.142 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
03:02:11.143 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
03:02:11.460 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
03:02:11.598 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
03:02:11.633 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
03:02:12.093 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
03:02:12.210 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2e67722b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5b4a84c0, org.springframework.security.web.context.SecurityContextHolderFilter@3f09b882, org.springframework.security.web.header.HeaderWriterFilter@17e04cc5, org.springframework.web.filter.CorsFilter@7d395621, org.springframework.security.web.csrf.CsrfFilter@d8156ac, org.springframework.security.web.authentication.logout.LogoutFilter@2fa99830, ru.anapa.autorent.config.JwtRequestFilter@406ad6d5, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@594e64be, org.springframework.security.web.session.ConcurrentSessionFilter@64c82a3b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@65061a8b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@713b9379, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@70d4476c, org.springframework.security.web.session.SessionManagementFilter@619a61c1, org.springframework.security.web.access.ExceptionTranslationFilter@1ac9a733, org.springframework.security.web.access.intercept.AuthorizationFilter@27fc70e2]
03:02:12.598 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
03:02:12.609 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
03:02:12.629 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 12.013 seconds (process running for 12.359)
03:02:12.677 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
03:02:12.678 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
03:02:12.829 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
03:02:12.915 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
03:02:12.964 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
03:02:13.025 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:02:13.144 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:02:13.260 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
03:02:13.368 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
03:02:13.462 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
03:02:13.513 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
03:02:14.277 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:02:14.835 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
03:02:16.440 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:02:16.812 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
03:02:16.812 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
03:02:16.812 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
03:02:16.812 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
03:02:16.812 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
03:02:16.812 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
03:02:16.812 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
03:02:16.812 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
03:02:17.003 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
03:02:17.363 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
03:02:17.399 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
03:02:17.501 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:17.598 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
03:02:17.690 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
03:02:17.806 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
03:02:17.897 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
03:02:18.011 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
03:02:18.108 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:02:18.380 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
03:02:18.397 [main] INFO  r.a.autorent.config.ScheduledTasks - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ПРИ СТАРТЕ ПРИЛОЖЕНИЯ ===
03:02:18.397 [main] INFO  r.a.a.service.DailyPaymentService - === ДЕТАЛЬНАЯ ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
03:02:18.584 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
03:02:18.673 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:02:18.778 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:02:18.876 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:02:19.243 [main] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
03:02:19.243 [main] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
03:02:19.243 [main] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
03:02:19.243 [main] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
03:02:19.243 [main] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:02:19.243 [main] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
03:02:19.260 [main] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='PENDING' 
        and dp1_0.payment_date<?
03:02:19.340 [main] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='FAILED' 
        and dp1_0.payment_date<?
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService - Просроченные платежи (до 2025-06-26):
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService -   PENDING: 0
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService - Платежи с превышением кредитного лимита:
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, дата=2025-06-25, примечания=Техническая ошибка: Credit limit exceeded
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService - Платежи за последние 7 дней:
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, PROCESSED: 0, FAILED: 1)
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
03:02:19.440 [main] INFO  r.a.a.service.DailyPaymentService - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ПРИ СТАРТЕ ПРИЛОЖЕНИЯ ===
03:02:19.440 [main] DEBUG org.hibernate.SQL - 
    select
        distinct dp1_0.payment_date 
    from
        daily_payments dp1_0 
    where
        dp1_0.status in ('PENDING', 'FAILED') 
        and dp1_0.payment_date<? 
    order by
        dp1_0.payment_date
03:02:19.542 [main] INFO  r.a.a.service.DailyPaymentService - Найдены необработанные платежи для дат: [2025-06-25]
03:02:19.542 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежей за дату: 2025-06-25
03:02:19.542 [main] INFO  r.a.a.service.DailyPaymentService - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ЗА ПЕРИОД 2025-06-25 - 2025-06-25 ===
03:02:19.542 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    where
        r1_0.status='ACTIVE' 
        and dp1_0.payment_date between ? and ? 
        and dp1_0.status in ('PENDING', 'FAILED') 
    order by
        dp1_0.payment_date
03:02:19.637 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:02:19.736 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:02:19.831 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 пропущенных платежей за период
03:02:19.831 [main] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенного платежа ID 3 (дата: 2025-06-25, сумма: 1500.00)
03:02:19.831 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:02:19.831 [main] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:02:19.939 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:02:20.046 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:02:20.148 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:02:21.996 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:02:22.093 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:02:22.205 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:02:22.358 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
03:02:22.358 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
03:02:22.358 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
03:02:22.373 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-diagnose
03:02:22.391 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:02:22.391 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-diagnose
03:02:22.407 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - === ДЕТАЛЬНАЯ ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
03:02:22.595 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:02:22.674 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
03:02:22.685 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:02:22.777 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:02:22.870 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:02:22.955 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:02:22.975 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:02:23.054 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:02:23.159 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:02:23.254 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:02:23.320 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
03:02:23.336 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
03:02:23.336 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   PENDING: 3
03:02:23.339 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
03:02:23.339 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   FAILED: 0
03:02:23.339 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
03:02:23.339 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='PENDING' 
        and dp1_0.payment_date<?
03:02:23.440 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='FAILED' 
        and dp1_0.payment_date<?
03:02:23.536 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Просроченные платежи (до 2025-06-26):
03:02:23.538 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   PENDING: 1
03:02:23.540 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   FAILED: 0
03:02:23.542 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Платежи с превышением кредитного лимита:
03:02:23.544 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
03:02:23.545 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Платежи за последние 7 дней:
03:02:23.546 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 1, PROCESSED: 0, FAILED: 0)
03:02:23.547 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
03:02:25.856 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:02:25.945 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:02:26.059 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:02:26.339 [main] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенных платежей завершена. Обработано: 1, ошибок: 0
03:02:26.339 [main] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенных платежей при старте завершена
03:02:26.339 [main] INFO  r.a.autorent.config.ScheduledTasks - Обработка пропущенных платежей при старте завершена успешно
03:02:26.339 [main] INFO  r.a.a.service.DailyPaymentService - === НАЧАЛО ОБРАБОТКИ ВСЕХ НЕОБРАБОТАННЫХ ПЛАТЕЖЕЙ ===
03:02:26.345 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status in ('PENDING', 'FAILED') 
        and dp1_0.payment_date<=? 
    order by
        dp1_0.payment_date
03:02:26.436 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:02:26.536 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:02:26.635 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 необработанных платежей до даты 2025-06-25
03:02:26.638 [main] INFO  r.a.a.service.DailyPaymentService - Распределение платежей по датам:
03:02:26.639 [main] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, FAILED: 1)
03:02:26.640 [main] DEBUG r.a.a.service.DailyPaymentService - Обработка платежа ID 3 (дата: 2025-06-25, статус: FAILED, сумма: 1500.00)
03:02:26.640 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:02:26.640 [main] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:02:26.716 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:02:26.830 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:02:26.933 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:02:28.348 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:02:28.505 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:02:28.608 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:02:29.019 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:02:29.117 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:02:29.412 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:02:29.438 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-startup-payments
03:02:29.439 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:02:29.479 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/test-startup-payments?continue to session
03:02:29.486 [http-nio-8080-exec-1] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
03:02:29.491 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
03:02:29.492 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:02:29.493 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
03:02:29.499 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:02:29.499 [http-nio-8080-exec-6] INFO  r.a.a.controller.AuthController - Login page requested
03:02:29.601 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:02:29.682 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:02:30.066 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:02:30.167 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:02:30.267 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:02:30.565 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан (дата: 2025-06-25, сумма: 1500.00)
03:02:30.565 [main] INFO  r.a.a.service.DailyPaymentService - === ЗАВЕРШЕНИЕ ОБРАБОТКИ НЕОБРАБОТАННЫХ ПЛАТЕЖЕЙ ===
03:02:30.581 [main] INFO  r.a.a.service.DailyPaymentService - Итого: обработано 1, ошибок 0, пропущено 0
03:02:35.520 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /
03:02:35.521 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:02:35.522 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /
03:02:35.525 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.description,
        c1_0.image,
        c1_0.name,
        c1_0.updated_at 
    from
        categories c1_0 
    left join
        rental_items ri1_0 
            on c1_0.id=ri1_0.category_id 
    group by
        c1_0.id 
    order by
        count(ri1_0.id) desc
03:02:35.718 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
    order by
        (select
            count(1) 
        from
            rentals r1_0 
        where
            ri1_0.id=r1_0.item_id) desc
03:02:35.814 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
    order by
        ri1_0.created_at desc
03:02:35.913 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at 
    from
        rental_items ri1_0 
    where
        ri1_0.available_quantity>0 
        and ri1_0.is_promotional=1
03:02:36.013 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        distinct c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    left join
        car_images i1_0 
            on c1_0.id=i1_0.car_id
03:02:36.829 [http-nio-8080-exec-4] DEBUG r.anapa.autorent.service.UserService - Получение списка всех пользователей
03:02:37.023 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0
03:02:37.113 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.216 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.313 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.411 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.497 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.595 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.693 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.780 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.878 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:37.977 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:38.061 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:38.162 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:38.261 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:02:38.812 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
03:02:38.897 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:02:38.994 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:04:24.289 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
03:04:24.290 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:04:24.294 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/admin/dashboard?continue to session
03:04:24.295 [http-nio-8080-exec-3] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
03:04:24.297 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
03:04:24.298 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:04:24.299 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
03:04:24.300 [http-nio-8080-exec-5] INFO  r.a.a.controller.AuthController - Login page requested
03:04:59.149 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
03:04:59.166 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:04:59.166 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 775E11AFDB6E429F878EA747266C1299
03:04:59.166 [http-nio-8080-exec-9] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
03:04:59.182 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
03:04:59.185 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:04:59.185 [http-nio-8080-exec-10] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 775E11AFDB6E429F878EA747266C1299
03:04:59.188 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
03:04:59.193 [http-nio-8080-exec-10] INFO  r.a.a.controller.AuthController - Login page requested
03:05:01.243 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /login
03:05:01.247 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:05:01.248 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 775E11AFDB6E429F878EA747266C1299
03:05:01.259 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/login?continue to session
03:05:01.262 [http-nio-8080-exec-2] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
03:05:01.280 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
03:05:01.283 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:05:01.287 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
03:05:01.294 [http-nio-8080-exec-1] INFO  r.a.a.controller.AuthController - Login page requested
03:05:01.342 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
03:05:01.344 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
03:05:01.347 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:05:01.347 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:05:01.351 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
03:05:01.351 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
03:05:03.482 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
03:05:03.903 [http-nio-8080-exec-7] DEBUG r.anapa.autorent.service.UserService - Загрузка пользователя по email: admin@example.com
03:05:03.911 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
03:05:04.005 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:05:04.107 [http-nio-8080-exec-7] DEBUG r.anapa.autorent.service.UserService - Пользователь найден: admin@example.com, роли: [ROLE_ADMIN], enabled: true
03:05:04.114 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        email=?,
        enabled=?,
        first_name=?,
        last_login_date=?,
        last_name=?,
        password=?,
        phone=?,
        registration_date=? 
    where
        id=?
03:05:04.601 [http-nio-8080-exec-7] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
03:05:04.606 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.s.ChangeSessionIdAuthenticationStrategy - Changed session id from 7984EFB78FA652A1BA3AED86480B83ED
03:05:04.608 [http-nio-8080-exec-7] DEBUG o.s.s.c.session.SessionRegistryImpl - Registering session 6400BA08F785A5561F0EC28933BAF9B2, for principal org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]]
03:05:04.611 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.CsrfAuthenticationStrategy - Replaced CSRF Token
03:05:04.613 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Stored SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]] to HttpSession [org.apache.catalina.session.StandardSessionFacade@27ca5d36]
03:05:04.614 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Set SecurityContextHolder to UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]
03:05:04.628 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
03:05:04.631 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:04.633 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
03:05:04.638 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
03:05:04.662 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
03:05:04.856 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
03:05:05.400 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
03:05:05.789 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
03:05:05.899 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
03:05:05.992 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
03:05:06.259 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
03:05:06.350 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:05:06.442 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:06.815 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
03:05:06.906 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:05:06.998 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:07.101 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
03:05:07.250 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
03:05:07.250 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
03:05:07.253 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
03:05:07.257 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
03:05:07.265 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:07.270 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:09.907 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-status
03:05:09.909 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:05:09.911 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.HttpSessionRequestCache - Saved request http://localhost:8080/test-status?continue to session
03:05:09.911 [http-nio-8080-exec-9] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to http://localhost:8080/auth/login
03:05:09.916 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/login
03:05:09.917 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:05:09.919 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/login
03:05:09.921 [http-nio-8080-exec-10] INFO  r.a.a.controller.AuthController - Login page requested
03:05:10.959 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/dashboard
03:05:10.962 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:10.966 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/dashboard
03:05:10.972 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
03:05:10.975 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.AdminController.adminDashboard(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.AdminController]
03:05:11.245 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        users u1_0
03:05:11.789 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        cars c1_0
03:05:12.166 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        cars c1_0 
    where
        c1_0.status=?
03:05:12.263 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
03:05:12.361 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        rentals r1_0 
    where
        r1_0.status=?
03:05:12.639 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0
03:05:12.734 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:05:12.826 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:13.195 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    order by
        r1_0.created_at desc 
    limit
        ?
03:05:13.292 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:05:13.386 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:13.486 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.status=?
03:05:13.626 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
03:05:13.628 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
03:05:13.632 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
03:05:13.636 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
03:05:13.661 [http-nio-8080-exec-4] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:13.666 [http-nio-8080-exec-1] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:15.269 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
03:05:15.274 [http-nio-8080-exec-6] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:15.276 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
03:05:15.280 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
03:05:15.286 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
03:05:15.293 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
03:05:15.474 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:05:15.570 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:15.736 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
03:05:15.736 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
03:05:15.740 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
03:05:15.741 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
03:05:15.761 [http-nio-8080-exec-7] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:15.763 [http-nio-8080-exec-5] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:17.784 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/process-all
03:05:17.787 [http-nio-8080-exec-8] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:17.788 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/process-all
03:05:17.792 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
03:05:17.794 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.processAllUnprocessedPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
03:05:17.795 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - === НАЧАЛО ОБРАБОТКИ ВСЕХ НЕОБРАБОТАННЫХ ПЛАТЕЖЕЙ ===
03:05:17.797 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status in ('PENDING', 'FAILED') 
        and dp1_0.payment_date<=? 
    order by
        dp1_0.payment_date
03:05:17.981 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:05:18.077 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:05:18.182 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Найдено 1 необработанных платежей до даты 2025-06-25
03:05:18.184 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Распределение платежей по датам:
03:05:18.186 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, FAILED: 1)
03:05:18.187 [http-nio-8080-exec-8] DEBUG r.a.a.service.DailyPaymentService - Обработка платежа ID 3 (дата: 2025-06-25, статус: FAILED, сумма: 1500.00)
03:05:18.188 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:05:18.189 [http-nio-8080-exec-8] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:05:18.280 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:05:18.384 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:05:18.483 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:05:19.144 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:05:19.235 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:05:19.337 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:05:19.702 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:05:19.794 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:20.064 [http-nio-8080-exec-8] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:05:20.156 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:05:20.260 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:05:20.368 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:05:22.108 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:05:22.200 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:05:22.300 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:05:22.596 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан (дата: 2025-06-25, сумма: 1500.00)
03:05:22.598 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - === ЗАВЕРШЕНИЕ ОБРАБОТКИ НЕОБРАБОТАННЫХ ПЛАТЕЖЕЙ ===
03:05:22.599 [http-nio-8080-exec-8] INFO  r.a.a.service.DailyPaymentService - Итого: обработано 1, ошибок 0, пропущено 0
03:05:24.215 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/payments
03:05:24.218 [http-nio-8080-exec-3] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:24.221 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/payments
03:05:24.224 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
03:05:24.228 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public java.lang.String ru.anapa.autorent.controller.DailyPaymentController.listPayments(org.springframework.ui.Model); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
03:05:24.235 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
    order by
        r1_0.created_at desc
03:05:24.421 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:05:24.521 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:24.669 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /js/main.js
03:05:24.669 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /css/main.css
03:05:24.681 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /js/main.js
03:05:24.681 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /css/main.css
03:05:24.698 [http-nio-8080-exec-9] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:24.700 [http-nio-8080-exec-10] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:26.772 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /admin/payments/diagnose
03:05:26.777 [http-nio-8080-exec-2] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - Retrieved SecurityContextImpl [Authentication=UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=admin@example.com, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=7984EFB78FA652A1BA3AED86480B83ED], Granted Authorities=[ROLE_ADMIN]]]
03:05:26.781 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /admin/payments/diagnose
03:05:26.784 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.diagnoseAllPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
03:05:26.789 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity ru.anapa.autorent.controller.DailyPaymentController.diagnoseAllPayments(); target is of class [ru.anapa.autorent.controller.DailyPaymentController]
03:05:26.791 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - === ДЕТАЛЬНАЯ ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
03:05:27.072 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
03:05:27.176 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:05:27.274 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:05:27.381 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:05:27.795 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
03:05:27.796 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
03:05:27.796 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
03:05:27.797 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
03:05:27.797 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:05:27.798 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
03:05:27.802 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='PENDING' 
        and dp1_0.payment_date<?
03:05:27.897 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='FAILED' 
        and dp1_0.payment_date<?
03:05:27.990 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Просроченные платежи (до 2025-06-26):
03:05:27.991 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   PENDING: 0
03:05:27.992 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:05:27.992 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Платежи с превышением кредитного лимита:
03:05:27.993 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
03:05:27.994 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, дата=2025-06-25, примечания=Техническая ошибка: Credit limit exceeded
03:05:27.995 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - Платежи за последние 7 дней:
03:05:27.996 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, PROCESSED: 0, FAILED: 1)
03:05:27.997 [http-nio-8080-exec-2] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
03:05:44.147 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
03:05:44.239 [main] INFO  r.anapa.autorent.AutorentApplication - Starting AutorentApplication using Java 17.0.14 with PID 12788 (C:\Users\Администратор\IdeaProjects\autorent\target\classes started by Администратор in C:\Users\Администратор\IdeaProjects\autorent)
03:05:44.240 [main] DEBUG r.anapa.autorent.AutorentApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
03:05:44.243 [main] INFO  r.anapa.autorent.AutorentApplication - The following 1 profile is active: "dev"
03:05:45.208 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
03:05:45.498 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 275 ms. Found 15 JPA repository interfaces.
03:05:46.625 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
03:05:46.640 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
03:05:46.640 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
03:05:46.640 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
03:05:46.767 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
03:05:46.768 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2446 ms
03:05:47.009 [main] DEBUG r.a.autorent.config.JwtRequestFilter - Filter 'jwtRequestFilter' configured for use
03:05:47.141 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
03:05:47.181 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
03:05:47.212 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
03:05:47.394 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
03:05:47.407 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
03:05:48.997 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@362c48c
03:05:48.998 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
03:05:50.378 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
03:05:53.967 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
03:05:54.291 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
03:05:54.998 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.OncePerRequestFilter.doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain) throws jakarta.servlet.ServletException,java.io.IOException] because it is marked as final, consider using interface-based JDK proxies instead.
03:05:54.998 [main] WARN  o.s.aop.framework.CglibAopProxy - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(jakarta.servlet.FilterConfig) throws jakarta.servlet.ServletException] because it is marked as final, consider using interface-based JDK proxies instead.
03:05:55.255 [main] INFO  r.anapa.autorent.service.SmsService - SmsService инициализирован с использованием SMS.ru API
03:05:55.367 [main] INFO  r.a.a.controller.AuthController - AuthController initialized
03:05:55.404 [main] INFO  r.a.a.controller.RentalController - RentalController initialized
03:05:55.808 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
03:05:55.884 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7b13fc9f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4009d97f, org.springframework.security.web.context.SecurityContextHolderFilter@53937bc6, org.springframework.security.web.header.HeaderWriterFilter@272271e0, org.springframework.web.filter.CorsFilter@552a1498, org.springframework.security.web.csrf.CsrfFilter@15ed06d3, org.springframework.security.web.authentication.logout.LogoutFilter@d5cbec0, ru.anapa.autorent.config.JwtRequestFilter@7d28cdcd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4156134d, org.springframework.security.web.session.ConcurrentSessionFilter@40c78bd1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6a4eb4f0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@77e3087, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@27fc70e2, org.springframework.security.web.session.SessionManagementFilter@21ad2894, org.springframework.security.web.access.ExceptionTranslationFilter@4756971e, org.springframework.security.web.access.intercept.AuthorizationFilter@3289e3a9]
03:05:56.232 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
03:05:56.232 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
03:05:56.252 [main] INFO  r.anapa.autorent.AutorentApplication - Started AutorentApplication in 12.406 seconds (process running for 12.898)
03:05:56.457 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Запуск проверки статусов автомобилей
03:05:56.540 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
03:05:56.576 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        roles r1_0
03:05:56.644 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:05:56.750 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:56.871 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=?
03:05:56.921 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: проверка наличия пользователей
03:05:56.955 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        users u1_0 
    where
        u1_0.email=?
03:05:56.959 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
03:05:57.049 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.user_id=?
03:05:57.056 [scheduling-1] INFO  r.a.autorent.config.DataInitializer - Обновлены статусы 0 автомобилей
03:05:57.141 [main] INFO  r.a.autorent.config.DataInitializer - DataInitializer: admin@example.com существует: true
03:05:57.235 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.end_date<?
03:05:57.333 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.status=? 
        and r1_0.start_date between ? and ?
03:05:57.433 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0
03:05:57.535 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.car_id,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        r1_0.item_id,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id 
    from
        rentals r1_0 
    where
        r1_0.car_id=? 
        and r1_0.status in (?, ?)
03:05:57.625 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:05:57.891 [main] INFO  r.a.autorent.config.DataInitializer - Статусы автомобилей синхронизированы при запуске приложения
03:05:57.891 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ СИСТЕМЫ ИЗОБРАЖЕНИЙ ===
03:05:57.891 [main] INFO  r.a.a.config.ImageTestInitializer - Проверка статуса миграции изображений...
03:05:58.069 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        car_images ci1_0
03:05:58.590 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
03:05:59.299 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:05:59.824 [main] DEBUG org.hibernate.SQL - 
    select
        ci1_0.id,
        ci1_0.car_id,
        ci1_0.content_type,
        ci1_0.description,
        ci1_0.display_order,
        ci1_0.file_name,
        ci1_0.image_data,
        ci1_0.image_url,
        ci1_0.is_main,
        ci1_0.rotation 
    from
        car_images ci1_0
03:06:01.802 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year 
    from
        cars c1_0 
    where
        c1_0.id=?
03:06:02.148 [main] INFO  r.a.a.service.ImageMigrationService - Статус миграции изображений:
03:06:02.149 [main] INFO  r.a.a.service.ImageMigrationService - - Всего изображений: 5
03:06:02.149 [main] INFO  r.a.a.service.ImageMigrationService - - В БД (BLOB): 5
03:06:02.149 [main] INFO  r.a.a.service.ImageMigrationService - - С URL: 5
03:06:02.149 [main] INFO  r.a.a.service.ImageMigrationService - - Требуют миграции: 0
03:06:02.149 [main] INFO  r.a.a.config.ImageTestInitializer - === ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===
03:06:02.150 [main] INFO  r.a.a.config.ImageTestInitializer - Для миграции изображений используйте: POST /admin/images/migrate
03:06:02.150 [main] INFO  r.a.a.config.ImageTestInitializer - Для проверки статуса используйте: GET /admin/images/migration-status
03:06:02.151 [main] INFO  r.a.autorent.config.ScheduledTasks - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ПРИ СТАРТЕ ПРИЛОЖЕНИЯ ===
03:06:02.151 [main] INFO  r.a.a.service.DailyPaymentService - === ДЕТАЛЬНАЯ ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
03:06:02.313 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
03:06:02.379 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
03:06:02.380 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
03:06:02.384 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
03:06:02.398 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-status
03:06:02.399 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:06:02.415 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:02.419 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-status
03:06:02.505 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:02.603 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:02.958 [main] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
03:06:02.964 [main] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
03:06:02.966 [main] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
03:06:02.967 [main] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
03:06:02.967 [main] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:06:02.967 [main] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
03:06:02.977 [main] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='PENDING' 
        and dp1_0.payment_date<?
03:06:03.064 [main] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='FAILED' 
        and dp1_0.payment_date<?
03:06:03.165 [main] INFO  r.a.a.service.DailyPaymentService - Просроченные платежи (до 2025-06-26):
03:06:03.165 [main] INFO  r.a.a.service.DailyPaymentService -   PENDING: 0
03:06:03.166 [main] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:06:03.166 [main] INFO  r.a.a.service.DailyPaymentService - Платежи с превышением кредитного лимита:
03:06:03.167 [main] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
03:06:03.168 [main] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, дата=2025-06-25, примечания=Техническая ошибка: Credit limit exceeded
03:06:03.169 [main] INFO  r.a.a.service.DailyPaymentService - Платежи за последние 7 дней:
03:06:03.170 [main] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, PROCESSED: 0, FAILED: 1)
03:06:03.170 [main] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
03:06:03.171 [main] INFO  r.a.a.service.DailyPaymentService - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ПРИ СТАРТЕ ПРИЛОЖЕНИЯ ===
03:06:03.176 [main] DEBUG org.hibernate.SQL - 
    select
        distinct dp1_0.payment_date 
    from
        daily_payments dp1_0 
    where
        dp1_0.status in ('PENDING', 'FAILED') 
        and dp1_0.payment_date<? 
    order by
        dp1_0.payment_date
03:06:03.268 [main] INFO  r.a.a.service.DailyPaymentService - Найдены необработанные платежи для дат: [2025-06-25]
03:06:03.270 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежей за дату: 2025-06-25
03:06:03.271 [main] INFO  r.a.a.service.DailyPaymentService - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ЗА ПЕРИОД 2025-06-25 - 2025-06-25 ===
03:06:03.275 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    where
        r1_0.status='ACTIVE' 
        and dp1_0.payment_date between ? and ? 
        and dp1_0.status in ('PENDING', 'FAILED') 
    order by
        dp1_0.payment_date
03:06:03.365 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:03.458 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:03.546 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 пропущенных платежей за период
03:06:03.546 [main] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенного платежа ID 3 (дата: 2025-06-25, сумма: 1500.00)
03:06:03.546 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:06:03.546 [main] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:06:03.657 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:03.762 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:03.853 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:05.799 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:05.888 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:06.009 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:06.365 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:06:06.447 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:06:06.710 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:06:06.804 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:06.902 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:06.993 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:08.548 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:08.643 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:08.749 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:09.045 [main] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенных платежей завершена. Обработано: 1, ошибок: 0
03:06:09.046 [main] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенных платежей при старте завершена
03:06:09.046 [main] INFO  r.a.autorent.config.ScheduledTasks - Обработка пропущенных платежей при старте завершена успешно
03:06:09.046 [main] INFO  r.a.a.service.DailyPaymentService - === НАЧАЛО ОБРАБОТКИ ВСЕХ НЕОБРАБОТАННЫХ ПЛАТЕЖЕЙ ===
03:06:09.048 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status in ('PENDING', 'FAILED') 
        and dp1_0.payment_date<=? 
    order by
        dp1_0.payment_date
03:06:09.146 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:09.247 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:09.325 [main] INFO  r.a.a.service.DailyPaymentService - Найдено 1 необработанных платежей до даты 2025-06-25
03:06:09.339 [main] INFO  r.a.a.service.DailyPaymentService - Распределение платежей по датам:
03:06:09.341 [main] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, FAILED: 1)
03:06:09.343 [main] DEBUG r.a.a.service.DailyPaymentService - Обработка платежа ID 3 (дата: 2025-06-25, статус: FAILED, сумма: 1500.00)
03:06:09.346 [main] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:06:09.346 [main] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:06:09.426 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:09.528 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:09.618 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:10.299 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-diagnose
03:06:10.300 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:06:10.301 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-diagnose
03:06:10.301 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - === ДЕТАЛЬНАЯ ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
03:06:10.591 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
03:06:10.691 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:10.792 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:10.905 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:11.093 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:11.195 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:11.282 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
03:06:11.284 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
03:06:11.284 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
03:06:11.284 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
03:06:11.284 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:06:11.284 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
03:06:11.287 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:11.287 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='PENDING' 
        and dp1_0.payment_date<?
03:06:11.384 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='FAILED' 
        and dp1_0.payment_date<?
03:06:11.485 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Просроченные платежи (до 2025-06-26):
03:06:11.486 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService -   PENDING: 0
03:06:11.486 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService -   FAILED: 0
03:06:11.487 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Платежи с превышением кредитного лимита:
03:06:11.488 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
03:06:11.489 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, дата=2025-06-25, примечания=Техническая ошибка: Credit limit exceeded
03:06:11.489 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - Платежи за последние 7 дней:
03:06:11.490 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, PROCESSED: 0, FAILED: 1)
03:06:11.490 [http-nio-8080-exec-3] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
03:06:11.674 [main] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:06:11.776 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:06:12.066 [main] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:06:12.165 [main] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:12.261 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:12.350 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:12.717 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:12.807 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:12.901 [main] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:13.159 [main] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан (дата: 2025-06-25, сумма: 1500.00)
03:06:13.159 [main] INFO  r.a.a.service.DailyPaymentService - === ЗАВЕРШЕНИЕ ОБРАБОТКИ НЕОБРАБОТАННЫХ ПЛАТЕЖЕЙ ===
03:06:13.159 [main] INFO  r.a.a.service.DailyPaymentService - Итого: обработано 1, ошибок 0, пропущено 0
03:06:18.514 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-startup-payments
03:06:18.515 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:06:18.516 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-startup-payments
03:06:18.516 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ПРИ СТАРТЕ ПРИЛОЖЕНИЯ ===
03:06:18.517 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        distinct dp1_0.payment_date 
    from
        daily_payments dp1_0 
    where
        dp1_0.status in ('PENDING', 'FAILED') 
        and dp1_0.payment_date<? 
    order by
        dp1_0.payment_date
03:06:18.692 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Найдены необработанные платежи для дат: [2025-06-25]
03:06:18.692 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Обработка платежей за дату: 2025-06-25
03:06:18.695 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ЗА ПЕРИОД 2025-06-25 - 2025-06-25 ===
03:06:18.695 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    where
        r1_0.status='ACTIVE' 
        and dp1_0.payment_date between ? and ? 
        and dp1_0.status in ('PENDING', 'FAILED') 
    order by
        dp1_0.payment_date
03:06:18.787 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:18.879 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:18.973 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Найдено 1 пропущенных платежей за период
03:06:18.973 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенного платежа ID 3 (дата: 2025-06-25, сумма: 1500.00)
03:06:18.974 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:06:18.974 [http-nio-8080-exec-10] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:06:19.062 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:19.159 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:19.254 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:19.899 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:19.990 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:20.088 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:20.447 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:06:20.539 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:06:20.805 [http-nio-8080-exec-10] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:06:20.898 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:20.994 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:21.098 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:22.759 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:22.839 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:22.949 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:23.212 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенных платежей завершена. Обработано: 1, ошибок: 0
03:06:23.212 [http-nio-8080-exec-10] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенных платежей при старте завершена
03:06:42.158 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /test-full-process
03:06:42.160 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
03:06:42.161 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /test-full-process
03:06:42.162 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - === ДЕТАЛЬНАЯ ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
03:06:42.422 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
03:06:42.517 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:42.608 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:42.699 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:43.060 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
03:06:43.062 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
03:06:43.064 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
03:06:43.064 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
03:06:43.065 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:06:43.066 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
03:06:43.068 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='PENDING' 
        and dp1_0.payment_date<?
03:06:43.151 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='FAILED' 
        and dp1_0.payment_date<?
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Просроченные платежи (до 2025-06-26):
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   PENDING: 0
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Платежи с превышением кредитного лимита:
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, дата=2025-06-25, примечания=Техническая ошибка: Credit limit exceeded
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Платежи за последние 7 дней:
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, PROCESSED: 0, FAILED: 1)
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
03:06:43.250 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ПРИ СТАРТЕ ПРИЛОЖЕНИЯ ===
03:06:43.250 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        distinct dp1_0.payment_date 
    from
        daily_payments dp1_0 
    where
        dp1_0.status in ('PENDING', 'FAILED') 
        and dp1_0.payment_date<? 
    order by
        dp1_0.payment_date
03:06:43.355 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Найдены необработанные платежи для дат: [2025-06-25]
03:06:43.358 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Обработка платежей за дату: 2025-06-25
03:06:43.358 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - === ОБРАБОТКА ПРОПУЩЕННЫХ ПЛАТЕЖЕЙ ЗА ПЕРИОД 2025-06-25 - 2025-06-25 ===
03:06:43.358 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    where
        r1_0.status='ACTIVE' 
        and dp1_0.payment_date between ? and ? 
        and dp1_0.status in ('PENDING', 'FAILED') 
    order by
        dp1_0.payment_date
03:06:43.456 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:43.546 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:43.646 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Найдено 1 пропущенных платежей за период
03:06:43.646 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенного платежа ID 3 (дата: 2025-06-25, сумма: 1500.00)
03:06:43.647 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:06:43.647 [http-nio-8080-exec-4] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:06:43.735 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:43.831 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:43.929 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:44.521 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:44.599 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:44.712 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:45.075 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:06:45.166 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:06:45.429 [http-nio-8080-exec-4] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:06:45.532 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:45.623 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:45.722 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:48.036 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:48.129 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:48.224 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:48.484 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенных платежей завершена. Обработано: 1, ошибок: 0
03:06:48.484 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Обработка пропущенных платежей при старте завершена
03:06:48.484 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - === НАЧАЛО ОБРАБОТКИ ВСЕХ НЕОБРАБОТАННЫХ ПЛАТЕЖЕЙ ===
03:06:48.484 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0 
    where
        dp1_0.status in ('PENDING', 'FAILED') 
        and dp1_0.payment_date<=? 
    order by
        dp1_0.payment_date
03:06:48.584 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:48.667 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:48.766 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Найдено 1 необработанных платежей до даты 2025-06-25
03:06:48.767 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Распределение платежей по датам:
03:06:48.767 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, FAILED: 1)
03:06:48.767 [http-nio-8080-exec-4] DEBUG r.a.a.service.DailyPaymentService - Обработка платежа ID 3 (дата: 2025-06-25, статус: FAILED, сумма: 1500.00)
03:06:48.768 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Обработка платежа ID 3 на сумму 1500.00 (текущий статус: FAILED)
03:06:48.768 [http-nio-8080-exec-4] WARN  r.a.a.service.DailyPaymentService - Повторная попытка обработки платежа ID 3 со статусом FAILED
03:06:48.851 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:48.951 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:49.035 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:50.771 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:50.855 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:50.961 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:51.319 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id 
    from
        accounts a1_0 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    where
        u1_0.id=?
03:06:51.400 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        users u1_0 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        u1_0.id=?
03:06:51.679 [http-nio-8080-exec-4] ERROR r.a.a.service.DailyPaymentService - Техническая ошибка при обработке платежа ID 3: Credit limit exceeded
03:06:51.765 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        ri1_0.category_id,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u2_0.id,
        u2_0.email,
        u2_0.enabled,
        u2_0.first_name,
        u2_0.last_login_date,
        u2_0.last_name,
        u2_0.password,
        u2_0.phone,
        u2_0.registration_date,
        dp1_0.status 
    from
        daily_payments dp1_0 
    join
        accounts a1_0 
            on a1_0.id=dp1_0.account_id 
    left join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    join
        rentals r1_0 
            on r1_0.id=dp1_0.rental_id 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        users u2_0 
            on u2_0.id=r1_0.user_id 
    where
        dp1_0.id=?
03:06:51.868 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.car_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date 
    from
        rentals r1_0 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    left join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    where
        r1_0.car_id=?
03:06:51.977 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.car_id,
        i1_0.id,
        i1_0.content_type,
        i1_0.description,
        i1_0.display_order,
        i1_0.file_name,
        i1_0.image_data,
        i1_0.image_url,
        i1_0.is_main,
        i1_0.rotation 
    from
        car_images i1_0 
    where
        i1_0.car_id=?
03:06:53.381 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        user_roles r1_0 
    join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        r1_0.user_id=?
03:06:53.478 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    where
        r1_0.user_id=?
03:06:53.592 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        daily_payments 
    set
        account_id=?,
        amount=?,
        created_at=?,
        notes=?,
        payment_date=?,
        processed_at=?,
        rental_id=?,
        status=? 
    where
        id=?
03:06:53.886 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Платеж ID 3 успешно обработан (дата: 2025-06-25, сумма: 1500.00)
03:06:53.886 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - === ЗАВЕРШЕНИЕ ОБРАБОТКИ НЕОБРАБОТАННЫХ ПЛАТЕЖЕЙ ===
03:06:53.886 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Итого: обработано 1, ошибок 0, пропущено 0
03:06:53.886 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - === ДЕТАЛЬНАЯ ДИАГНОСТИКА ВСЕХ ПЛАТЕЖЕЙ ===
03:06:54.086 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id,
        dp1_0.account_id,
        dp1_0.amount,
        dp1_0.created_at,
        dp1_0.notes,
        dp1_0.payment_date,
        dp1_0.processed_at,
        dp1_0.rental_id,
        dp1_0.status 
    from
        daily_payments dp1_0
03:06:54.186 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r1_0.user_id,
        r1_1.id,
        r1_1.name 
    from
        accounts a1_0 
    join
        users u1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r1_0 
            on u1_0.id=r1_0.user_id 
    left join
        roles r1_1 
            on r1_1.id=r1_0.role_id 
    where
        a1_0.id=?
03:06:54.289 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:54.383 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.actual_return_date,
        r1_0.cancel_reason,
        c1_0.id,
        c1_0.available,
        c1_0.brand,
        c1_0.category,
        c1_0.color,
        c1_0.daily_rate,
        c1_0.description,
        c1_0.fuel_type,
        c1_0.license_plate,
        c1_0.model,
        c1_0.price_per_day,
        c1_0.registration_number,
        c1_0.schedule,
        c1_0.seats,
        c1_0.status,
        c1_0.transmission,
        c1_0.year,
        r1_0.comment,
        r1_0.created_at,
        r1_0.end_date,
        r1_0.notes,
        r1_0.rating,
        ri1_0.id,
        ri1_0.available_quantity,
        c2_0.id,
        c2_0.created_at,
        c2_0.description,
        c2_0.image,
        c2_0.name,
        c2_0.updated_at,
        ri1_0.created_at,
        ri1_0.deposit,
        ri1_0.description,
        ri1_0.image,
        ri1_0.is_promotional,
        ri1_0.name,
        ri1_0.price_per_day,
        ri1_0.updated_at,
        r1_0.start_date,
        r1_0.status,
        r1_0.total_cost,
        r1_0.updated_at,
        r1_0.user_id,
        u1_0.id,
        a1_0.id,
        a1_0.account_number,
        a1_0.allow_negative_balance,
        a1_0.balance,
        a1_0.credit_limit,
        a1_0.initial_balance,
        a1_0.max_rental_amount,
        a1_0.max_rental_duration,
        a1_0.user_id,
        u1_0.email,
        u1_0.enabled,
        u1_0.first_name,
        u1_0.last_login_date,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.registration_date,
        r2_0.user_id,
        r2_1.id,
        r2_1.name 
    from
        rentals r1_0 
    left join
        cars c1_0 
            on c1_0.id=r1_0.car_id 
    left join
        rental_items ri1_0 
            on ri1_0.id=r1_0.item_id 
    left join
        categories c2_0 
            on c2_0.id=ri1_0.category_id 
    join
        users u1_0 
            on u1_0.id=r1_0.user_id 
    left join
        accounts a1_0 
            on u1_0.id=a1_0.user_id 
    left join
        user_roles r2_0 
            on u1_0.id=r2_0.user_id 
    left join
        roles r2_1 
            on r2_1.id=r2_0.role_id 
    where
        r1_0.id=?
03:06:54.728 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Всего платежей в системе: 3
03:06:54.728 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Распределение по статусам:
03:06:54.728 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   PENDING: 2
03:06:54.728 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   PROCESSED: 0
03:06:54.728 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:06:54.728 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   CANCELLED: 0
03:06:54.744 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='PENDING' 
        and dp1_0.payment_date<?
03:06:54.837 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id) 
    from
        daily_payments dp1_0 
    where
        dp1_0.status='FAILED' 
        and dp1_0.payment_date<?
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Просроченные платежи (до 2025-06-26):
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   PENDING: 0
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   FAILED: 1
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Платежи с превышением кредитного лимита:
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Все FAILED платежи:
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   Платеж ID 3: сумма=1500.00, дата=2025-06-25, примечания=Техническая ошибка: Credit limit exceeded
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - Платежи за последние 7 дней:
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService -   2025-06-25: 1 платежей (PENDING: 0, PROCESSED: 0, FAILED: 1)
03:06:54.918 [http-nio-8080-exec-4] INFO  r.a.a.service.DailyPaymentService - === КОНЕЦ ДИАГНОСТИКИ ===
